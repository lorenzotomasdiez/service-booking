# ============================================================================
# BarberPro Development Environment Configuration
# ============================================================================
# This file is optimized for local Docker-based development environment
# Use this when running: docker-compose -f docker/docker-compose.yml -f docker/docker-compose.dev.yml up
#
# IMPORTANT: This file uses Docker service names (not localhost) for container-to-container communication
# Docker services communicate via the barberpro-network bridge network
#
# Environment Variable Precedence (highest to lowest):
#   1. CLI environment variables (command line)
#   2. .env.local (gitignored, developer-specific overrides)
#   3. .env.development (this file - Docker default)
#   4. .env.example (template, not loaded)
#   5. Default values in application code (lowest)
# ============================================================================

# ============================================================================
# ENVIRONMENT SELECTION
# ============================================================================
NODE_ENV=development

# ============================================================================
# APPLICATION URLS
# ============================================================================
# Frontend URL (accessible from host browser)
FRONTEND_URL=http://localhost:5173

# Backend API URL (accessible from host browser)
BACKEND_URL=http://localhost:3000
API_BASE_URL=http://localhost:3000

# Application URL (for redirects, emails, etc.)
APP_URL=http://localhost:5173

# ============================================================================
# DATABASE CONFIGURATION (PostgreSQL 16)
# ============================================================================
# Database credentials
POSTGRES_DB=barberpro_dev
POSTGRES_USER=barberpro
POSTGRES_PASSWORD=barberpro_dev_password
POSTGRES_HOST=postgres
POSTGRES_PORT=5432

# Database connection URL for Prisma (uses Docker service name: postgres)
# Format: postgresql://USER:PASSWORD@HOST:PORT/DATABASE
DATABASE_URL=postgresql://barberpro:barberpro_dev_password@postgres:5432/barberpro_dev

# ============================================================================
# REDIS CONFIGURATION
# ============================================================================
# Redis connection for caching and sessions (uses Docker service name: redis)
REDIS_URL=redis://redis:6379
REDIS_HOST=redis
REDIS_PORT=6379

# Redis password (optional in development)
REDIS_PASSWORD=

# ============================================================================
# BACKEND API CONFIGURATION
# ============================================================================
# Server port (internal container port)
BACKEND_PORT=3000

# JWT Authentication
JWT_SECRET=dev_jwt_secret_change_in_production_minimum_32_characters_required
JWT_EXPIRES_IN=7d

# Logging configuration
LOG_LEVEL=debug

# ============================================================================
# CORS CONFIGURATION
# ============================================================================
# CORS origins - must include both localhost (for browser access) and Docker service names
# Also includes container IP range for Docker internal networking
CORS_ORIGIN=http://localhost:5173,http://localhost:3000,http://frontend:5173,http://backend:3000

# Credentials support
CORS_CREDENTIALS=true

# ============================================================================
# ARGENTINA-SPECIFIC CONFIGURATION
# ============================================================================
# Timezone for Argentina
TIMEZONE=America/Argentina/Buenos_Aires

# Locale (Spanish - Argentina)
LOCALE=es-AR

# Currency
CURRENCY=ARS

# ============================================================================
# ARGENTINA MOCK SERVICES - MERCADOPAGO (Payment Gateway)
# ============================================================================
# MercadoPago mock service URL (uses Docker service name: mercadopago-mock)
MERCADOPAGO_BASE_URL=http://mercadopago-mock:3001
MERCADOPAGO_ENVIRONMENT=sandbox

# Test credentials for mock service
MERCADOPAGO_ACCESS_TOKEN=test_mock_access_token_development
MERCADOPAGO_PUBLIC_KEY=test_mock_public_key_development

# Webhook URL (backend receives webhooks from mock service)
# IMPORTANT: Use Docker service name 'backend' not 'localhost'
MERCADOPAGO_WEBHOOK_URL=http://backend:3000/api/webhooks/mercadopago
MERCADOPAGO_WEBHOOK_SECRET=test_webhook_secret_development

# Mock service default scenario (success, pending, failure, timeout)
MERCADOPAGO_DEFAULT_SCENARIO=success

# ============================================================================
# ARGENTINA MOCK SERVICES - AFIP (Tax Authority)
# ============================================================================
# AFIP mock service URL (uses Docker service name: afip-mock)
AFIP_BASE_URL=http://afip-mock:3002
AFIP_ENVIRONMENT=sandbox

# Test CUIT for development
AFIP_CUIT=20123456789

# Mock certificate paths (mounted from docker/mocks/afip/certs)
AFIP_CERT_PATH=/app/certs/afip-mock.crt
AFIP_KEY_PATH=/app/certs/afip-mock.key

# AFIP service endpoints
AFIP_WSFEV1_URL=http://afip-mock:3002/wsfev1
AFIP_WSAA_URL=http://afip-mock:3002/wsaa

# ============================================================================
# ARGENTINA MOCK SERVICES - WHATSAPP (Business Messaging)
# ============================================================================
# WhatsApp mock service URL (uses Docker service name: whatsapp-mock)
WHATSAPP_API_URL=http://whatsapp-mock:3003
WHATSAPP_BASE_URL=http://whatsapp-mock:3003

# Test credentials for mock service
WHATSAPP_API_TOKEN=test_mock_whatsapp_token_development
WHATSAPP_ACCESS_TOKEN=test_mock_whatsapp_token_development

# WhatsApp business phone number (Argentina format)
WHATSAPP_BUSINESS_PHONE=+5491112345678
WHATSAPP_PHONE_NUMBER_ID=test_phone_id_development

# Webhook URL (backend receives webhooks from mock service)
# IMPORTANT: Use Docker service name 'backend' not 'localhost'
WHATSAPP_WEBHOOK_URL=http://backend:3000/api/webhooks/whatsapp
WHATSAPP_WEBHOOK_VERIFY_TOKEN=test_webhook_verify_token_development

# ============================================================================
# ARGENTINA MOCK SERVICES - SMS (SMS Gateway)
# ============================================================================
# SMS mock service URL (uses Docker service name: sms-mock)
SMS_API_URL=http://sms-mock:3004
SMS_BASE_URL=http://sms-mock:3004

# Test credentials for mock service
SMS_API_KEY=test_mock_sms_api_key_development
SMS_API_SECRET=test_mock_sms_api_secret_development

# SMS provider (mock in development)
SMS_PROVIDER=mock

# Webhook URL (backend receives delivery status from mock service)
# IMPORTANT: Use Docker service name 'backend' not 'localhost'
SMS_WEBHOOK_URL=http://backend:3000/api/webhooks/sms

# SMS pricing configuration for mock
SMS_COST_PER_SEGMENT=0.05

# ============================================================================
# EMAIL CONFIGURATION - MAILHOG (Email Testing)
# ============================================================================
# MailHog SMTP server (uses Docker service name: mailhog)
SMTP_HOST=mailhog
SMTP_PORT=1025
SMTP_SECURE=false

# No authentication required for MailHog
SMTP_USER=
SMTP_PASSWORD=

# Email sender configuration
SMTP_FROM=noreply@barberpro.local
SMTP_FROM_NAME=BarberPro

# MailHog web UI (accessible from host browser)
MAILHOG_UI_URL=http://localhost:8025

# ============================================================================
# ADMIN TOOLS CREDENTIALS
# ============================================================================
# pgAdmin (PostgreSQL web interface - http://localhost:8080)
PGADMIN_DEFAULT_EMAIL=admin@barberpro.local
PGADMIN_DEFAULT_PASSWORD=admin
PGADMIN_PORT=8080

# Redis Commander (Redis web interface - http://localhost:8081)
REDIS_COMMANDER_USER=admin
REDIS_COMMANDER_PASSWORD=admin
REDIS_COMMANDER_PORT=8081

# ============================================================================
# FRONTEND CONFIGURATION (SvelteKit + Vite)
# ============================================================================
# API endpoints (browser connects to localhost, not Docker service names)
VITE_API_URL=http://localhost:3000
VITE_BACKEND_URL=http://localhost:3000
VITE_WS_URL=ws://localhost:3000

# Public environment variables (exposed to browser)
PUBLIC_API_URL=http://localhost:3000/api
PUBLIC_SOCKET_URL=http://localhost:3000
PUBLIC_APP_NAME=BarberPro
PUBLIC_APP_VERSION=1.0.0

# Argentina configuration (frontend)
PUBLIC_TIMEZONE=America/Argentina/Buenos_Aires
VITE_TIMEZONE=America/Argentina/Buenos_Aires
PUBLIC_LOCALE=es-AR
VITE_LOCALE=es-AR
PUBLIC_CURRENCY=ARS
VITE_CURRENCY=ARS

# MercadoPago public key (frontend)
VITE_MERCADOPAGO_PUBLIC_KEY=test_mock_public_key_development
PUBLIC_MERCADOPAGO_PUBLIC_KEY=test_mock_public_key_development

# Feature flags
PUBLIC_ENABLE_SOCIAL_LOGIN=true
PUBLIC_ENABLE_WHATSAPP_SUPPORT=true

# Support contact information
PUBLIC_SUPPORT_WHATSAPP=+5491112345678
PUBLIC_SUPPORT_EMAIL=soporte@barberpro.local
PUBLIC_SUPPORT_PHONE=+54 11 1234-5678

# ============================================================================
# MONITORING AND OBSERVABILITY (Optional in Development)
# ============================================================================
# Prometheus metrics endpoint
PROMETHEUS_URL=http://prometheus:9090
ENABLE_METRICS=true

# Grafana dashboard
GRAFANA_URL=http://localhost:3001
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=admin

# Loki logs
LOKI_URL=http://loki:3100

# Metrics retention
PROMETHEUS_RETENTION_DAYS=7
LOKI_RETENTION_DAYS=7

# ============================================================================
# SECURITY & DEBUG CONFIGURATION
# ============================================================================
# Enable debug mode in development
APP_DEBUG=true

# Enable Swagger API documentation
ENABLE_SWAGGER=true

# BCrypt salt rounds (lower for faster development)
BCRYPT_SALT_ROUNDS=10

# Rate limiting (lenient in development)
RATE_LIMIT_MAX_REQUESTS=1000
RATE_LIMIT_WINDOW_MS=900000

# Session configuration
SESSION_SECRET=dev_session_secret_change_in_production
SESSION_MAX_AGE=604800000

# ============================================================================
# TESTING CONFIGURATION
# ============================================================================
# Test database (used by integration tests)
TEST_DATABASE_URL=postgresql://barberpro:barberpro_dev_password@postgres:5432/barberpro_test

# ============================================================================
# DOCKER NETWORK TROUBLESHOOTING
# ============================================================================
# If you encounter connection issues:
#
# 1. CORS Errors:
#    - Add your container IP to CORS_ORIGIN
#    - Find IP: docker inspect <container> | grep IPAddress
#    - Example: CORS_ORIGIN=http://localhost:5173,http://172.18.0.5:5173
#
# 2. Connection Refused:
#    - Use service names (postgres, redis) NOT localhost
#    - Service names resolve to correct container IPs automatically
#
# 3. Webhook Delivery:
#    - Always use 'backend' service name for webhook URLs
#    - Example: http://backend:3000/api/webhooks/...
#    - NOT http://localhost:3000/api/webhooks/...
#
# 4. Database Connection:
#    - Ensure postgres is healthy before backend starts
#    - Check: docker-compose ps
#    - Logs: docker-compose logs postgres
#
# 5. Network Inspection:
#    - List networks: docker network ls
#    - Inspect: docker network inspect barberpro-network
#    - Test connectivity: docker-compose exec backend ping postgres
#
# ============================================================================
# USEFUL DEVELOPMENT COMMANDS
# ============================================================================
# Start development environment:
#   make dev
#   OR: docker-compose -f docker/docker-compose.yml -f docker/docker-compose.dev.yml up
#
# Start with mock services:
#   make dev-with-mocks
#   OR: docker-compose -f docker/docker-compose.yml -f docker/docker-compose.dev.yml -f docker/docker-compose.mocks.yml up
#
# View logs:
#   make logs              # All services
#   make logs-backend      # Backend only
#   make logs-frontend     # Frontend only
#
# Check service health:
#   make status
#   OR: docker-compose ps
#
# Access admin tools:
#   pgAdmin:         http://localhost:8080
#   Redis Commander: http://localhost:8081
#   MailHog UI:      http://localhost:8025
#   Grafana:         http://localhost:3001
#
# Run database migrations:
#   make db-migrate
#
# Seed database:
#   make db-seed
#
# Reset database:
#   make db-reset
#
# ============================================================================
