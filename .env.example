# ============================================================================
# BarberPro Environment Variables Template
# ============================================================================
# This is a comprehensive template showing ALL possible environment variables
# Copy to appropriate location based on your environment:
#
#   Development (Docker):  cp .env.example .env.development
#   Production:            cp .env.example .env.production
#   Personal overrides:    cp .env.example .env.local (gitignored)
#
# Environment Variable Precedence (highest to lowest):
#   1. CLI environment variables (export VAR=value)
#   2. .env.local (gitignored, developer-specific)
#   3. .env.development or .env.production (environment-specific)
#   4. .env.example (this file - template only, not loaded)
#   5. Default values in application code (lowest)
#
# IMPORTANT DOCKER NETWORKING:
#   - Use Docker service names (postgres, redis) for container-to-container communication
#   - Use localhost for browser/host access to exposed ports
#   - Webhook URLs must use service names (http://backend:3000/...)
#
# See docs/environment-variables.md for complete reference
# See docs/environment-setup.md for setup instructions
# See docs/troubleshooting-docker.md for common issues
# ============================================================================

# ============================================================================
# ENVIRONMENT SELECTION
# ============================================================================
# Options: development, production, test
NODE_ENV=development

# ============================================================================
# APPLICATION URLS
# ============================================================================
# Frontend URL (accessible from browser)
# Development: http://localhost:5173
# Production:  https://barberpro.com.ar
FRONTEND_URL=http://localhost:5173

# Backend API URL (accessible from browser)
# Development: http://localhost:3000
# Production:  https://api.barberpro.com.ar
BACKEND_URL=http://localhost:3000
API_BASE_URL=http://localhost:3000

# Application URL (for redirects, emails, QR codes)
APP_URL=http://localhost:5173

# ============================================================================
# DATABASE CONFIGURATION (PostgreSQL 16)
# ============================================================================
# Database name
# Recommendation: Use different databases per environment
#   Development: barberpro_dev
#   Production:  barberpro_prod
#   Testing:     barberpro_test
POSTGRES_DB=barberpro_dev

# Database user
POSTGRES_USER=barberpro

# Database password
# IMPORTANT: Use strong password in production!
# Generate with: openssl rand -base64 32
POSTGRES_PASSWORD=barberpro_dev_password

# Database host
# Docker:    postgres (service name)
# Localhost: localhost
# Remote:    your-db-host.com
POSTGRES_HOST=postgres

# Database port
POSTGRES_PORT=5432

# Database connection URL for Prisma ORM
# Format: postgresql://USER:PASSWORD@HOST:PORT/DATABASE
# Docker example: postgresql://barberpro:password@postgres:5432/barberpro_dev
# Remote example: postgresql://barberpro:password@db.example.com:5432/barberpro_prod
DATABASE_URL=postgresql://barberpro:barberpro_dev_password@postgres:5432/barberpro_dev

# ============================================================================
# REDIS CONFIGURATION
# ============================================================================
# Redis connection URL
# Docker:    redis://redis:6379
# Localhost: redis://localhost:6379
# Remote:    redis://your-redis-host:6379
REDIS_URL=redis://redis:6379

# Redis host
REDIS_HOST=redis

# Redis port
REDIS_PORT=6379

# Redis password (optional, recommended for production)
# Leave empty for no password
REDIS_PASSWORD=

# Redis database number (0-15)
REDIS_DB=0

# ============================================================================
# BACKEND API CONFIGURATION
# ============================================================================
# Server port (internal container port or local port)
BACKEND_PORT=3000

# JWT Authentication
# IMPORTANT: Use secure random string in production!
# Generate with: openssl rand -base64 64
JWT_SECRET=dev_jwt_secret_change_in_production_minimum_32_characters_required
JWT_EXPIRES_IN=7d
JWT_REFRESH_EXPIRES_IN=30d

# Logging level
# Options: debug, info, warn, error
# Development: debug
# Production:  warn or error
LOG_LEVEL=debug

# Pretty print logs (disable in production for JSON logs)
LOG_PRETTY=true

# ============================================================================
# CORS CONFIGURATION
# ============================================================================
# CORS allowed origins (comma-separated list or * for all)
# Development: http://localhost:5173,http://localhost:3000,http://frontend:5173
# Production:  https://barberpro.com.ar,https://api.barberpro.com.ar
# IMPORTANT: Include both localhost AND Docker service names in development
CORS_ORIGIN=http://localhost:5173,http://localhost:3000,http://frontend:5173,http://backend:3000

# Allow credentials (cookies, authorization headers)
CORS_CREDENTIALS=true

# Allowed methods
CORS_METHODS=GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS

# Allowed headers
CORS_ALLOWED_HEADERS=Content-Type,Authorization,X-Requested-With

# Exposed headers
CORS_EXPOSED_HEADERS=Content-Range,X-Content-Range

# Max age for preflight cache (seconds)
CORS_MAX_AGE=86400

# ============================================================================
# ARGENTINA-SPECIFIC CONFIGURATION
# ============================================================================
# Timezone for Argentina
# Always use: America/Argentina/Buenos_Aires
TIMEZONE=America/Argentina/Buenos_Aires

# Locale (Spanish - Argentina)
# Always use: es-AR
LOCALE=es-AR

# Currency (Argentine Peso)
# Always use: ARS
CURRENCY=ARS

# Country code
COUNTRY_CODE=AR

# Phone country code
PHONE_COUNTRY_CODE=+54

# ============================================================================
# MERCADOPAGO PAYMENT INTEGRATION
# ============================================================================
# MercadoPago base URL
# Development (mock): http://mercadopago-mock:3001
# Production:         https://api.mercadopago.com
MERCADOPAGO_BASE_URL=http://mercadopago-mock:3001

# MercadoPago environment
# Options: sandbox, production
MERCADOPAGO_ENVIRONMENT=sandbox

# MercadoPago credentials
# Get from: https://www.mercadopago.com.ar/developers
# Development: Use test credentials or mock values
# Production:  Use production credentials
MERCADOPAGO_ACCESS_TOKEN=test_mock_access_token_development
MERCADOPAGO_PUBLIC_KEY=test_mock_public_key_development

# Webhook URL (backend receives payment notifications)
# IMPORTANT: Use 'backend' service name in Docker, not localhost
# Docker:     http://backend:3000/api/webhooks/mercadopago
# Production: https://api.barberpro.com.ar/api/webhooks/mercadopago
MERCADOPAGO_WEBHOOK_URL=http://backend:3000/api/webhooks/mercadopago

# Webhook secret for signature verification
MERCADOPAGO_WEBHOOK_SECRET=test_webhook_secret_development

# Default payment scenario (mock only)
# Options: success, pending, failure, timeout
MERCADOPAGO_DEFAULT_SCENARIO=success

# ============================================================================
# AFIP INTEGRATION (Argentina Tax Authority)
# ============================================================================
# AFIP base URL
# Development (mock): http://afip-mock:3002
# Production:         https://wswhomo.afip.gov.ar (homologation)
#                     https://servicios1.afip.gov.ar (production)
AFIP_BASE_URL=http://afip-mock:3002

# AFIP environment
# Options: sandbox, production
AFIP_ENVIRONMENT=sandbox

# AFIP CUIT (Company tax ID)
# Format: 20123456789 (11 digits)
AFIP_CUIT=20123456789

# AFIP certificate paths (for WSAA authentication)
# Development: Use mock certificates
# Production:  Use real AFIP certificates from AFIP portal
AFIP_CERT_PATH=/app/certs/afip-mock.crt
AFIP_KEY_PATH=/app/certs/afip-mock.key

# AFIP Web Services URLs
# Development: Use mock endpoints
# Production:  Use real AFIP endpoints
AFIP_WSFEV1_URL=http://afip-mock:3002/wsfev1
AFIP_WSAA_URL=http://afip-mock:3002/wsaa

# AFIP punto de venta (point of sale)
AFIP_PUNTO_VENTA=1

# ============================================================================
# WHATSAPP BUSINESS INTEGRATION
# ============================================================================
# WhatsApp API base URL
# Development (mock): http://whatsapp-mock:3003
# Production:         https://graph.facebook.com/v18.0
WHATSAPP_API_URL=http://whatsapp-mock:3003
WHATSAPP_BASE_URL=http://whatsapp-mock:3003

# WhatsApp access token
# Get from: Meta Business Manager / WhatsApp Business API
# Development: Use mock token
# Production:  Use real WhatsApp Business API token
WHATSAPP_API_TOKEN=test_mock_whatsapp_token_development
WHATSAPP_ACCESS_TOKEN=test_mock_whatsapp_token_development

# WhatsApp business phone number (Argentina format: +54 9 11 1234-5678)
WHATSAPP_BUSINESS_PHONE=+5491112345678
WHATSAPP_PHONE_NUMBER_ID=test_phone_id_development

# Webhook URL (backend receives WhatsApp events)
# IMPORTANT: Use 'backend' service name in Docker, not localhost
# Docker:     http://backend:3000/api/webhooks/whatsapp
# Production: https://api.barberpro.com.ar/api/webhooks/whatsapp
WHATSAPP_WEBHOOK_URL=http://backend:3000/api/webhooks/whatsapp

# Webhook verification token (set this in Meta Webhook configuration)
WHATSAPP_WEBHOOK_VERIFY_TOKEN=test_webhook_verify_token_development

# ============================================================================
# SMS INTEGRATION (Argentina SMS Gateway)
# ============================================================================
# SMS API base URL
# Development (mock): http://sms-mock:3004
# Production:         https://api.smsgateway.com.ar (example)
SMS_API_URL=http://sms-mock:3004
SMS_BASE_URL=http://sms-mock:3004

# SMS API credentials
# Get from your SMS provider
# Development: Use mock credentials
# Production:  Use real SMS gateway credentials
SMS_API_KEY=test_mock_sms_api_key_development
SMS_API_SECRET=test_mock_sms_api_secret_development

# SMS provider name
# Options: mock, twilio, nexmo, infobip, custom
SMS_PROVIDER=mock

# Webhook URL (backend receives delivery status)
# IMPORTANT: Use 'backend' service name in Docker, not localhost
# Docker:     http://backend:3000/api/webhooks/sms
# Production: https://api.barberpro.com.ar/api/webhooks/sms
SMS_WEBHOOK_URL=http://backend:3000/api/webhooks/sms

# SMS pricing (for cost tracking)
SMS_COST_PER_SEGMENT=0.05

# SMS sender ID (shown to recipients)
SMS_SENDER_ID=BarberPro

# ============================================================================
# EMAIL CONFIGURATION
# ============================================================================
# SMTP server host
# Development (MailHog): mailhog
# Production: smtp.gmail.com, smtp.sendgrid.net, etc.
SMTP_HOST=mailhog

# SMTP server port
# Common ports: 25 (plain), 587 (TLS), 465 (SSL), 1025 (MailHog)
SMTP_PORT=1025

# SMTP secure connection
# true for SSL/TLS, false for plain or STARTTLS
SMTP_SECURE=false

# SMTP authentication
# Leave empty for MailHog in development
SMTP_USER=
SMTP_PASSWORD=

# Email sender configuration
SMTP_FROM=noreply@barberpro.local
SMTP_FROM_NAME=BarberPro

# MailHog web UI URL (development only)
# Access at: http://localhost:8025
MAILHOG_UI_URL=http://localhost:8025

# ============================================================================
# ADMIN TOOLS CREDENTIALS
# ============================================================================
# pgAdmin (PostgreSQL web interface)
# Access at: http://localhost:8080
PGADMIN_DEFAULT_EMAIL=admin@barberpro.local
PGADMIN_DEFAULT_PASSWORD=admin
PGADMIN_PORT=8080

# Redis Commander (Redis web interface)
# Access at: http://localhost:8081
REDIS_COMMANDER_USER=admin
REDIS_COMMANDER_PASSWORD=admin
REDIS_COMMANDER_PORT=8081

# ============================================================================
# FRONTEND CONFIGURATION (SvelteKit + Vite)
# ============================================================================
# Frontend environment variables must start with VITE_ or PUBLIC_

# API endpoints (browser connects to localhost, not Docker service names)
# Development: http://localhost:3000
# Production:  https://api.barberpro.com.ar
VITE_API_URL=http://localhost:3000
VITE_BACKEND_URL=http://localhost:3000
VITE_WS_URL=ws://localhost:3000

# Public environment variables (exposed to browser)
PUBLIC_API_URL=http://localhost:3000/api
PUBLIC_SOCKET_URL=http://localhost:3000
PUBLIC_APP_NAME=BarberPro
PUBLIC_APP_VERSION=1.0.0

# Argentina configuration (frontend)
PUBLIC_TIMEZONE=America/Argentina/Buenos_Aires
VITE_TIMEZONE=America/Argentina/Buenos_Aires
PUBLIC_LOCALE=es-AR
VITE_LOCALE=es-AR
PUBLIC_CURRENCY=ARS
VITE_CURRENCY=ARS

# MercadoPago public key (frontend - only public key, never private token!)
VITE_MERCADOPAGO_PUBLIC_KEY=test_mock_public_key_development
PUBLIC_MERCADOPAGO_PUBLIC_KEY=test_mock_public_key_development

# Feature flags
PUBLIC_ENABLE_SOCIAL_LOGIN=true
PUBLIC_ENABLE_WHATSAPP_SUPPORT=true
PUBLIC_ENABLE_SMS_NOTIFICATIONS=true
PUBLIC_ENABLE_EMAIL_NOTIFICATIONS=true

# Support contact information
PUBLIC_SUPPORT_WHATSAPP=+5491112345678
PUBLIC_SUPPORT_EMAIL=soporte@barberpro.local
PUBLIC_SUPPORT_PHONE=+54 11 1234-5678

# ============================================================================
# MONITORING AND OBSERVABILITY
# ============================================================================
# Prometheus metrics
PROMETHEUS_URL=http://prometheus:9090
ENABLE_METRICS=true
PROMETHEUS_RETENTION_DAYS=7

# Grafana dashboard
GRAFANA_URL=http://localhost:3001
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=admin

# Loki logs
LOKI_URL=http://loki:3100
LOKI_RETENTION_DAYS=7

# Sentry error tracking (optional)
# Get from: https://sentry.io
SENTRY_DSN=
VITE_SENTRY_DSN=
SENTRY_ENVIRONMENT=development

# New Relic APM (optional)
# Get from: https://newrelic.com
NEWRELIC_LICENSE_KEY=

# Datadog APM (optional)
# Get from: https://www.datadoghq.com
DATADOG_API_KEY=

# ============================================================================
# ANALYTICS
# ============================================================================
# Google Analytics (frontend)
# Get from: https://analytics.google.com
GOOGLE_ANALYTICS_ID=G-XXXXXXXXXX
VITE_GOOGLE_ANALYTICS_ID=G-XXXXXXXXXX

# Hotjar analytics (frontend)
# Get from: https://www.hotjar.com
HOTJAR_ID=
VITE_HOTJAR_ID=

# Mixpanel analytics (optional)
MIXPANEL_TOKEN=

# ============================================================================
# RATE LIMITING
# ============================================================================
# Maximum requests per window
# Development: 1000 (lenient)
# Production:  100 (strict)
RATE_LIMIT_MAX_REQUESTS=1000

# Time window in milliseconds
# Common values: 60000 (1 min), 900000 (15 min), 3600000 (1 hour)
RATE_LIMIT_WINDOW_MS=900000

# Rate limit by IP address
RATE_LIMIT_BY_IP=true

# Skip rate limiting for certain IPs (comma-separated)
RATE_LIMIT_SKIP_IPS=

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================
# BCrypt salt rounds for password hashing
# Development: 10 (faster)
# Production:  12-14 (more secure but slower)
BCRYPT_SALT_ROUNDS=10

# Session secret
# IMPORTANT: Use secure random string in production!
# Generate with: openssl rand -base64 64
SESSION_SECRET=dev_session_secret_change_in_production

# Session max age (milliseconds)
# 604800000 = 7 days
SESSION_MAX_AGE=604800000

# Enable debug mode
# IMPORTANT: Never enable in production!
APP_DEBUG=true

# Enable Swagger API documentation
# IMPORTANT: Disable in production!
ENABLE_SWAGGER=true

# Enable GraphQL Playground
ENABLE_GRAPHQL_PLAYGROUND=true

# HTTPS redirect (production only)
FORCE_HTTPS=false

# Helmet security headers
ENABLE_HELMET=true

# ============================================================================
# FILE UPLOAD CONFIGURATION
# ============================================================================
# Maximum file size (bytes)
# 10485760 = 10MB
MAX_FILE_SIZE=10485760

# Allowed file types (comma-separated MIME types)
ALLOWED_FILE_TYPES=image/jpeg,image/png,image/gif,image/webp,application/pdf

# Upload destination
# Options: local, s3, cloudinary
UPLOAD_DESTINATION=local

# Local upload directory
UPLOAD_DIR=./uploads

# S3 configuration (if UPLOAD_DESTINATION=s3)
AWS_S3_BUCKET=
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_REGION=us-east-1

# Cloudinary configuration (if UPLOAD_DESTINATION=cloudinary)
CLOUDINARY_CLOUD_NAME=
CLOUDINARY_API_KEY=
CLOUDINARY_API_SECRET=

# ============================================================================
# TESTING CONFIGURATION
# ============================================================================
# Test database
TEST_DATABASE_URL=postgresql://barberpro:barberpro_dev_password@postgres:5432/barberpro_test

# Test Redis
TEST_REDIS_URL=redis://redis:6379/1

# Test mode
TEST_MODE=false

# Mock external services in tests
MOCK_EXTERNAL_SERVICES=true

# ============================================================================
# BACKUP CONFIGURATION (Production)
# ============================================================================
# S3 bucket for database backups
BACKUP_S3_BUCKET=barberpro-backups
BACKUP_S3_ACCESS_KEY=
BACKUP_S3_SECRET_KEY=
BACKUP_S3_REGION=sa-east-1

# Backup schedule (cron format)
# Example: "0 2 * * *" = Daily at 2 AM
BACKUP_SCHEDULE=0 2 * * *

# Backup retention days
BACKUP_RETENTION_DAYS=30

# ============================================================================
# SOCIAL LOGIN CONFIGURATION (Optional)
# ============================================================================
# Google OAuth
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=
GOOGLE_CALLBACK_URL=http://localhost:3000/auth/google/callback

# Facebook OAuth
FACEBOOK_APP_ID=
FACEBOOK_APP_SECRET=
FACEBOOK_CALLBACK_URL=http://localhost:3000/auth/facebook/callback

# Apple OAuth
APPLE_CLIENT_ID=
APPLE_TEAM_ID=
APPLE_KEY_ID=
APPLE_PRIVATE_KEY=

# ============================================================================
# DOCKER-SPECIFIC CONFIGURATION
# ============================================================================
# Docker network name (defined in docker-compose.yml)
DOCKER_NETWORK=barberpro-network

# Container resource limits (docker-compose)
BACKEND_CPU_LIMIT=1.0
BACKEND_MEMORY_LIMIT=1G
FRONTEND_CPU_LIMIT=0.5
FRONTEND_MEMORY_LIMIT=512M

# ============================================================================
# ENVIRONMENT-SPECIFIC NOTES
# ============================================================================
#
# DEVELOPMENT ENVIRONMENT (.env.development):
# ✓ Use Docker service names (postgres, redis, etc.)
# ✓ Enable debug mode (APP_DEBUG=true)
# ✓ Enable Swagger (ENABLE_SWAGGER=true)
# ✓ Use mock services (mercadopago-mock, afip-mock, etc.)
# ✓ Use MailHog for email testing
# ✓ Use weak passwords (convenient for development)
# ✓ Expose all ports for debugging
# ✓ Enable hot reload with volume mounts
#
# PRODUCTION ENVIRONMENT (.env.production):
# ✓ Use localhost or remote hosts (not Docker service names)
# ✓ Disable debug mode (APP_DEBUG=false)
# ✓ Disable Swagger (ENABLE_SWAGGER=false)
# ✓ Use real external services (MercadoPago, AFIP, etc.)
# ✓ Use real SMTP server (SendGrid, Gmail, etc.)
# ✓ Use strong passwords (CHANGE ALL DEFAULTS!)
# ✓ Restrict CORS to specific domains
# ✓ Enable HTTPS (FORCE_HTTPS=true)
# ✓ Configure monitoring and error tracking
# ✓ Set up database backups
#
# TESTING ENVIRONMENT (.env.test):
# ✓ Use separate test database (barberpro_test)
# ✓ Mock all external services
# ✓ Use fast startup (minimal health check retries)
# ✓ Isolated from dev/prod data
#
# ============================================================================
# ADDITIONAL RESOURCES
# ============================================================================
# 📖 Complete documentation:
#    - docs/environment-setup.md       - Environment setup guide
#    - docs/environment-variables.md   - Complete variable reference
#    - docs/troubleshooting-docker.md  - Docker troubleshooting guide
#    - docker/README.md                - Docker infrastructure guide
#
# 🔗 Useful links:
#    - MercadoPago Developers: https://www.mercadopago.com.ar/developers
#    - AFIP Web Services:      https://www.afip.gob.ar/ws/
#    - WhatsApp Business API:  https://developers.facebook.com/docs/whatsapp
#
# 💡 Tips:
#    - Never commit .env files to version control
#    - Use .env.local for personal overrides (gitignored)
#    - Rotate secrets regularly in production
#    - Use environment-specific values (dev/staging/prod)
#    - Document any custom variables you add
#
# ============================================================================
