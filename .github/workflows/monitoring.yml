name: Infrastructure Monitoring

on:
  schedule:
    # Run health checks every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [staging, production]
        
    steps:
      - name: Check service health
        id: health-check
        run: |
          if [ "${{ matrix.environment }}" = "staging" ]; then
            URL="https://staging.barberpro.com.ar"
          else
            URL="https://barberpro.com.ar"
          fi
          
          # Basic health check
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL/health" || echo "000")
          
          if [ "$HEALTH_STATUS" = "200" ]; then
            echo "status=healthy" >> $GITHUB_OUTPUT
            echo "✅ ${{ matrix.environment }} environment is healthy"
          else
            echo "status=unhealthy" >> $GITHUB_OUTPUT
            echo "❌ ${{ matrix.environment }} environment is unhealthy (HTTP $HEALTH_STATUS)"
            exit 1
          fi

      - name: Detailed health check
        if: steps.health-check.outputs.status == 'healthy'
        run: |
          if [ "${{ matrix.environment }}" = "staging" ]; then
            URL="https://staging.barberpro.com.ar"
          else
            URL="https://barberpro.com.ar"
          fi
          
          # Detailed health check
          DETAILED_RESPONSE=$(curl -s "$URL/health/detailed")
          echo "Detailed health response: $DETAILED_RESPONSE"
          
          # Check response time
          RESPONSE_TIME=$(curl -s -o /dev/null -w "%{time_total}" "$URL/health")
          echo "Response time: ${RESPONSE_TIME}s"
          
          # Alert if response time > 2 seconds
          if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
            echo "⚠️ High response time detected: ${RESPONSE_TIME}s"
          fi

      - name: Check API endpoints
        if: steps.health-check.outputs.status == 'healthy'
        run: |
          if [ "${{ matrix.environment }}" = "staging" ]; then
            BASE_URL="https://staging.barberpro.com.ar"
          else
            BASE_URL="https://barberpro.com.ar"
          fi
          
          # Test critical API endpoints
          endpoints=(
            "/health"
            "/health/ready"
            "/health/live"
            "/api/health"
          )
          
          for endpoint in "${endpoints[@]}"; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL$endpoint" || echo "000")
            if [ "$STATUS" = "200" ]; then
              echo "✅ $endpoint - OK"
            else
              echo "❌ $endpoint - Failed (HTTP $STATUS)"
            fi
          done

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          username: 'Monitoring Bot'
          text: |
            🚨 Health check failed for ${{ matrix.environment }} environment
            Service: BarberPro
            Time: ${{ github.event.head_commit.timestamp }}
            Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: health-check
    if: success()
    
    steps:
      - name: Load test staging environment
        run: |
          echo "Running basic load test on staging..."
          # Simple load test with curl
          for i in {1..10}; do
            curl -s "https://staging.barberpro.com.ar/health" &
          done
          wait
          echo "Load test completed"

      - name: Check Argentina latency
        run: |
          echo "Testing latency from various locations..."
          
          # Test response time to staging
          STAGING_TIME=$(curl -s -o /dev/null -w "%{time_total}" "https://staging.barberpro.com.ar/health")
          echo "Staging response time: ${STAGING_TIME}s"
          
          # Test response time to production  
          PROD_TIME=$(curl -s -o /dev/null -w "%{time_total}" "https://barberpro.com.ar/health")
          echo "Production response time: ${PROD_TIME}s"
          
          # Alert if either is > 2 seconds (should be < 0.2s for Argentina)
          if (( $(echo "$STAGING_TIME > 2.0" | bc -l) )); then
            echo "⚠️ Staging high latency: ${STAGING_TIME}s"
          fi
          
          if (( $(echo "$PROD_TIME > 2.0" | bc -l) )); then
            echo "⚠️ Production high latency: ${PROD_TIME}s"
          fi

  ssl-check:
    name: SSL Certificate Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Check SSL certificates
        run: |
          domains=("barberpro.com.ar" "staging.barberpro.com.ar" "api.barberpro.com.ar")
          
          for domain in "${domains[@]}"; do
            echo "Checking SSL for $domain..."
            
            # Check if domain resolves
            if nslookup "$domain" > /dev/null 2>&1; then
              # Check SSL certificate expiration
              EXPIRY=$(echo | openssl s_client -servername "$domain" -connect "$domain:443" 2>/dev/null | openssl x509 -noout -enddate | cut -d= -f2)
              EXPIRY_EPOCH=$(date -d "$EXPIRY" +%s)
              CURRENT_EPOCH=$(date +%s)
              DAYS_UNTIL_EXPIRY=$(( (EXPIRY_EPOCH - CURRENT_EPOCH) / 86400 ))
              
              echo "SSL for $domain expires in $DAYS_UNTIL_EXPIRY days ($EXPIRY)"
              
              if [ $DAYS_UNTIL_EXPIRY -lt 30 ]; then
                echo "⚠️ SSL certificate for $domain expires soon!"
              fi
            else
              echo "❌ Domain $domain does not resolve"
            fi
          done

  database-check:
    name: Database Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Test database connectivity
        run: |
          echo "Database connectivity check would go here"
          echo "This requires database credentials and should be run securely"
          echo "Implementation depends on Railway API or direct database access"

  report-status:
    name: Generate Status Report
    runs-on: ubuntu-latest
    needs: [health-check, performance-check, ssl-check]
    if: always()
    
    steps:
      - name: Generate report
        run: |
          echo "## BarberPro Infrastructure Status Report" > status-report.md
          echo "**Date:** $(date)" >> status-report.md
          echo "" >> status-report.md
          
          if [ "${{ needs.health-check.result }}" = "success" ]; then
            echo "✅ Health checks: PASSED" >> status-report.md
          else
            echo "❌ Health checks: FAILED" >> status-report.md
          fi
          
          if [ "${{ needs.performance-check.result }}" = "success" ]; then
            echo "✅ Performance checks: PASSED" >> status-report.md
          else
            echo "❌ Performance checks: FAILED" >> status-report.md
          fi
          
          if [ "${{ needs.ssl-check.result }}" = "success" ]; then
            echo "✅ SSL checks: PASSED" >> status-report.md
          else
            echo "❌ SSL checks: FAILED" >> status-report.md
          fi
          
          echo "" >> status-report.md
          echo "**Next check:** $(date -d '+5 minutes')" >> status-report.md
          
          cat status-report.md

      - name: Upload status report
        uses: actions/upload-artifact@v3
        with:
          name: status-report-${{ github.run_number }}
          path: status-report.md