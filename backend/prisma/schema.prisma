// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?  @unique // Argentina phone format +54-xxx-xxx-xxxx
  password  String?  // Nullable for OAuth-only users
  role      UserRole @default(CLIENT)
  isActive  Boolean  @default(true)
  isVerified Boolean @default(false)

  // Authentication method tracking
  authMethod AuthMethod @default(EMAIL)
  emailVerifiedAt DateTime?

  // Argentina specific fields
  dni       String?  @unique // Documento Nacional de Identidad
  cuit      String?  @unique // CUIT for tax purposes
  timezone  String   @default("America/Argentina/Buenos_Aires")
  locale    String   @default("es-AR")

  // Profile fields
  avatar    String?
  birthDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clientBookings   Booking[] @relation("ClientBookings")
  provider         Provider?
  refreshTokens    RefreshToken[]
  notifications    Notification[]
  referralsGiven   Referral[] @relation("ReferralsGiven")
  referralsReceived Referral[] @relation("ReferralsReceived")
  promotionUsages  PromotionUsage[]
  loyaltyPoints    LoyaltyPoints[]
  clientNotes      ClientNote[] @relation("ClientNotes")
  emailVerificationTokens EmailVerificationToken[]
  oauthProviders   OAuthProvider[]

  @@index([email])              // Login queries
  @@index([phone])              // Phone lookup
  @@index([dni])                // Argentina DNI lookup
  @@index([role, isActive])     // Role-based queries
  @@index([isVerified])         // Verification status
  @@index([authMethod])         // Auth method lookups
  @@map("users")
}

model Provider {
  id           String  @id @default(cuid())
  userId       String  @unique
  businessName String
  description  String?
  address      String
  city         String
  province     String  @default("Buenos Aires")
  country      String  @default("Argentina")
  postalCode   String?
  
  // Contact information
  businessPhone String?
  businessEmail String?
  website      String?
  
  // Business details
  taxId        String? // CUIT/CUIL
  businessType String? // Barber Shop, Salon, etc.
  
  // Availability and settings
  workingHours Json? // JSON object with schedule
  isVerified   Boolean @default(false)
  isActive     Boolean @default(true)
  
  // Geo location for search
  latitude  Float?
  longitude Float?
  
  // Media
  logo        String?
  coverImage  String?
  images      String[] // Array of image URLs
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  services Service[]
  bookings Booking[]
  referralCodes ReferralCode[]
  promotions Promotion[]
  loyaltyPoints LoyaltyPoints[]
  analytics ProviderAnalytics[]
  clientNotes ClientNote[]

  @@index([isActive, isVerified])  // Active verified providers lookup
  @@index([city, province])        // Location-based search
  @@index([latitude, longitude])   // Geo-location queries
  @@index([businessType])          // Service type filtering
  @@map("providers")
}

model ServiceCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  icon        String?   // Icon name or URL
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  services    Service[]

  @@map("service_categories")
}

model Service {
  id          String  @id @default(cuid())
  name        String
  description String?
  duration    Int     // minutes
  price       Decimal @db.Decimal(10, 2) // ARS pricing
  isActive    Boolean @default(true)
  
  // Category relationship
  categoryId  String?
  
  // Provider relation
  providerId  String
  
  // Pricing options
  depositRequired Boolean @default(false)
  depositAmount   Decimal? @db.Decimal(10, 2)
  
  // Service options
  bufferTimeBefore Int @default(5)  // minutes before service
  bufferTimeAfter  Int @default(10) // minutes after service
  maxAdvanceBookingDays Int @default(30)
  allowSameDayBooking Boolean @default(true)
  requiresConsultation Boolean @default(false)
  
  // Media
  images      String[] // Array of image URLs
  
  // Metadata
  tags        String[] // searchable tags
  sortOrder   Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  provider Provider         @relation(fields: [providerId], references: [id], onDelete: Cascade)
  category ServiceCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  bookings Booking[]

  @@index([providerId, isActive])
  @@index([categoryId])
  @@index([price])
  @@map("services")
}

model Booking {
  id          String        @id @default(cuid())
  clientId    String
  serviceId   String
  providerId  String
  
  // Appointment details
  startTime   DateTime // in UTC, convert to Argentina timezone
  endTime     DateTime // in UTC, convert to Argentina timezone
  status      BookingStatus @default(PENDING)
  totalAmount Decimal       @db.Decimal(10, 2) // ARS
  
  // Additional information
  notes       String?
  clientNotes String?
  internalNotes String? // Private provider notes
  
  // Payment information
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?       // mercadopago, cash, etc.
  paymentId     String?       // External payment ID
  
  // Cancellation
  cancelledBy   String?
  cancelReason  String?
  cancelledAt   DateTime?
  
  // Confirmation and completion
  confirmedAt   DateTime?
  completedAt   DateTime?
  
  // Rating and feedback
  clientRating  Int?     // 1-5 stars
  clientFeedback String?
  providerFeedback String?
  
  // Reminder notifications
  remindersSent Json?    // Track sent reminders
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  client   User     @relation("ClientBookings", fields: [clientId], references: [id], onDelete: Cascade)
  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  payment  Payment?
  referrals Referral[]
  promotionUsages PromotionUsage[]
  loyaltyTransactions LoyaltyTransaction[]

  // Performance indexes for Argentina booking platform
  @@index([providerId, startTime]) // Provider's daily schedule lookup
  @@index([clientId, startTime])   // Client's booking history
  @@index([status, startTime])     // Status-based queries
  @@index([startTime, endTime])    // Time range conflicts
  @@index([providerId, status, startTime]) // Provider dashboard queries
  @@index([paymentStatus])         // Payment processing
  @@map("bookings")
}

model Payment {
  id        String        @id @default(cuid())
  bookingId String        @unique
  
  // Payment details
  amount         Decimal       @db.Decimal(10, 2)
  currency       String        @default("ARS")
  status         PaymentStatus @default(PENDING)
  paymentMethod  String        // mercadopago, cash, transfer
  
  // External payment gateway data
  externalId     String? // MercadoPago payment ID
  externalStatus String?
  gatewayData    Json?   // Raw gateway response
  
  // Metadata
  description    String?
  metadata       Json?
  
  // Timestamps
  paidAt      DateTime?
  failedAt    DateTime?
  refundedAt  DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // PAY11-001: Additional payment fields
  gateway        String  @default("mercadopago") // Gateway tracking
  customerEmail  String?
  customerDni    String?

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  invoice Invoice? // PAY11-001: Invoice relationship
  
  @@index([gateway, status]) // PAY11-001: Performance indexes
  @@index([customerEmail])
  @@map("payments")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])           // Token lookup
  @@index([userId])          // User's tokens
  @@index([expiresAt])       // Cleanup expired tokens
  @@map("refresh_tokens")
}

model Notification {
  id       String             @id @default(cuid())
  userId   String
  title    String
  message  String
  type     NotificationType
  status   NotificationStatus @default(UNREAD)
  
  // Metadata
  data     Json? // Additional data for the notification
  
  // Timestamps
  readAt   DateTime?
  sentAt   DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])     // User's unread notifications
  @@index([type, createdAt])    // Notification type queries
  @@index([sentAt])             // Sent notifications tracking
  @@map("notifications")
}

// Enums
enum UserRole {
  CLIENT
  PROVIDER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum NotificationType {
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  BOOKING_REMINDER
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  SYSTEM_ANNOUNCEMENT
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

enum AuthMethod {
  EMAIL
  OAUTH
  BOTH
}

enum OAuthProviderType {
  GOOGLE
  FACEBOOK
}

// Referral System Models
model ReferralCode {
  id          String   @id @default(cuid())
  code        String   @unique
  providerId  String
  isActive    Boolean  @default(true)
  maxUses     Int?     // null means unlimited
  usedCount   Int      @default(0)
  
  // Reward settings
  referrerReward    Decimal @db.Decimal(10, 2) // Amount for referrer
  refereeDiscount   Decimal @db.Decimal(10, 2) // Discount for new client
  rewardType        RewardType @default(FIXED_AMOUNT)
  
  // Validity
  expiresAt   DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  provider    Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  referrals   Referral[]
  
  @@index([providerId, isActive])
  @@index([code])
  @@map("referral_codes")
}

model Referral {
  id              String        @id @default(cuid())
  codeId          String
  referrerId      String        // The user who made the referral
  refereeId       String        // The new user who was referred
  bookingId       String?       // Booking that triggered the reward
  status          ReferralStatus @default(PENDING)
  
  // Reward tracking
  rewardAmount    Decimal?      @db.Decimal(10, 2)
  discountAmount  Decimal?      @db.Decimal(10, 2)
  rewardPaidAt    DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  code     ReferralCode @relation(fields: [codeId], references: [id], onDelete: Cascade)
  referrer User         @relation("ReferralsGiven", fields: [referrerId], references: [id], onDelete: Cascade)
  referee  User         @relation("ReferralsReceived", fields: [refereeId], references: [id], onDelete: Cascade)
  booking  Booking?     @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  
  @@index([codeId])
  @@index([referrerId])
  @@index([refereeId])
  @@index([status])
  @@map("referrals")
}

// Promotion System Models
model Promotion {
  id               String         @id @default(cuid())
  providerId       String
  name             String
  description      String?
  code             String?        @unique // Optional promo code
  
  // Discount settings
  discountType     DiscountType
  discountValue    Decimal        @db.Decimal(10, 2)
  minimumAmount    Decimal?       @db.Decimal(10, 2)
  maxDiscountAmount Decimal?      @db.Decimal(10, 2)
  
  // Validity and limits
  isActive         Boolean        @default(true)
  maxUses          Int?           // null means unlimited
  usedCount        Int            @default(0)
  maxUsesPerUser   Int            @default(1)
  
  // Target services
  applicableToAllServices Boolean @default(true)
  serviceIds       String[]       // Specific services if not all
  
  // Time constraints
  validFrom        DateTime
  validUntil       DateTime
  
  // Special conditions
  isNewClientOnly  Boolean        @default(false)
  isBirthdayPromo  Boolean        @default(false)
  isGroupBooking   Boolean        @default(false)
  minGroupSize     Int?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  provider         Provider       @relation(fields: [providerId], references: [id], onDelete: Cascade)
  usages           PromotionUsage[]
  
  @@index([providerId, isActive])
  @@index([code])
  @@index([validFrom, validUntil])
  @@index([isActive, validFrom, validUntil])
  @@map("promotions")
}

model PromotionUsage {
  id           String    @id @default(cuid())
  promotionId  String
  userId       String
  bookingId    String?
  discountAmount Decimal @db.Decimal(10, 2)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  promotion    Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking      Booking?  @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  
  @@index([promotionId])
  @@index([userId])
  @@index([bookingId])
  @@map("promotion_usages")
}

// Loyalty Points System
model LoyaltyPoints {
  id          String   @id @default(cuid())
  userId      String
  providerId  String
  points      Int      @default(0)
  totalEarned Int      @default(0)
  totalSpent  Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider    Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  transactions LoyaltyTransaction[]
  
  @@unique([userId, providerId])
  @@index([userId])
  @@index([providerId])
  @@map("loyalty_points")
}

model LoyaltyTransaction {
  id              String      @id @default(cuid())
  loyaltyPointsId String
  bookingId       String?
  type            LoyaltyTransactionType
  points          Int
  description     String?
  
  createdAt       DateTime @default(now())
  
  // Relations
  loyaltyPoints   LoyaltyPoints @relation(fields: [loyaltyPointsId], references: [id], onDelete: Cascade)
  booking         Booking?      @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  
  @@index([loyaltyPointsId])
  @@index([bookingId])
  @@index([type, createdAt])
  @@map("loyalty_transactions")
}

// Provider Analytics Models
model ProviderAnalytics {
  id              String   @id @default(cuid())
  providerId      String
  date            DateTime @db.Date
  
  // Daily metrics
  totalBookings   Int      @default(0)
  completedBookings Int    @default(0)
  cancelledBookings Int    @default(0)
  noShowBookings  Int      @default(0)
  
  // Revenue metrics
  totalRevenue    Decimal  @db.Decimal(10, 2) @default(0)
  platformFee     Decimal  @db.Decimal(10, 2) @default(0)
  netRevenue      Decimal  @db.Decimal(10, 2) @default(0)
  
  // Client metrics
  newClients      Int      @default(0)
  returningClients Int     @default(0)
  
  // Service metrics (JSON for flexibility)
  serviceMetrics  Json?    // { serviceId: { bookings, revenue } }
  
  // Time metrics
  averageServiceTime Int?  // minutes
  utilizationRate    Decimal? @db.Decimal(5, 2) // percentage
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  provider        Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  @@unique([providerId, date])
  @@index([providerId, date])
  @@index([date])
  @@map("provider_analytics")
}

// Client Relationship Management
model ClientNote {
  id         String   @id @default(cuid())
  providerId String
  clientId   String
  content    String
  isPrivate  Boolean  @default(true)
  tags       String[] // searchable tags
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  client     User     @relation("ClientNotes", fields: [clientId], references: [id], onDelete: Cascade)
  
  @@index([providerId, clientId])
  @@index([providerId, tags])
  @@map("client_notes")
}

// New Enums
enum RewardType {
  FIXED_AMOUNT
  PERCENTAGE
}

enum ReferralStatus {
  PENDING
  COMPLETED
  PAID
  EXPIRED
}

enum DiscountType {
  FIXED_AMOUNT
  PERCENTAGE
  BUY_ONE_GET_ONE
}

enum LoyaltyTransactionType {
  EARNED
  SPENT
  EXPIRED
  BONUS
}

// PAY11-001: Production Payment Platform & Financial Operations Tables

model PaymentAnalytics {
  id              String    @id @default(cuid())
  transactionId   String    @unique
  gateway         String
  amount          Float
  currency        String    @default("ARS")
  status          String
  processingTime  Int       // milliseconds
  region          String    @default("AR")
  paymentMethod   String
  userId          String?
  providerId      String?
  errorCode       String?
  fraudScore      Float?
  complianceFlags String[]
  timestamp       DateTime  @default(now())
  
  @@index([gateway, timestamp])
  @@index([status, timestamp])
  @@index([userId, timestamp])
  @@index([providerId, timestamp])
  @@map("payment_analytics")
}

model SecurityAuditLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  event     String
  severity  String
  details   Json
  resolved  Boolean  @default(false)
  resolvedAt DateTime?
  resolvedBy String?
  
  @@index([timestamp])
  @@index([event, severity])
  @@index([resolved])
  @@map("security_audit_logs")
}

model ComplianceAuditLog {
  id             String   @id @default(cuid())
  timestamp      DateTime @default(now())
  overallStatus  String
  details        Json
  recommendations Json
  
  @@index([timestamp])
  @@index([overallStatus])
  @@map("compliance_audit_logs")
}

model AuditReport {
  id              String   @id @default(cuid())
  timestamp       DateTime @default(now())
  type            String
  findings        Json
  recommendations Json
  complianceScore Float
  status          String
  
  @@index([timestamp])
  @@index([type])
  @@index([status])
  @@map("audit_reports")
}

model Invoice {
  id            String   @id @default(cuid())
  transactionId String   @unique
  customerEmail String
  amount        Float
  currency      String   @default("ARS")
  vatAmount     Float
  invoiceNumber String   @unique
  cuitSeller    String?
  timestamp     DateTime @default(now())
  createdAt     DateTime @default(now())
  
  // Relations
  payment       Payment? @relation(fields: [transactionId], references: [id])
  
  @@index([invoiceNumber])
  @@index([customerEmail])
  @@index([timestamp])
  @@map("invoices")
}

model AfipTransaction {
  id           String   @id @default(cuid())
  transactionId String
  amount       Float
  vatAmount    Float?
  customerCuit String?
  concept      String
  timestamp    DateTime @default(now())
  reported     Boolean  @default(false)
  reportedAt   DateTime?

  @@index([transactionId])
  @@index([timestamp])
  @@index([reported])
  @@map("afip_transactions")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  email     String   // Store the email being verified
  expiresAt DateTime // Token expires after 24 hours
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("email_verification_tokens")
}

model OAuthProvider {
  id              String   @id @default(cuid())
  userId          String
  provider        OAuthProviderType
  providerUserId  String   // Google user ID
  email           String   // Email from OAuth provider
  profileData     Json?    // Store additional profile info (name, picture, etc.)
  accessToken     String?  // OAuth access token
  refreshToken    String?  // OAuth refresh token (if available)
  tokenExpiresAt  DateTime? // When access token expires
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
  @@index([userId])
  @@index([provider])
  @@index([providerUserId])
  @@map("oauth_providers")
}

model PromotionalCampaign {
  id           String   @id @default(cuid())
  name         String
  type         String
  target       String
  parameters   Json
  expectedRoi  Float
  startDate    DateTime
  endDate      DateTime
  status       String   @default("ACTIVE")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([type, status])
  @@index([startDate, endDate])
  @@map("promotional_campaigns")
}