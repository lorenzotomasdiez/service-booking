// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?  @unique // Argentina phone format +54-xxx-xxx-xxxx
  password  String
  role      UserRole @default(CLIENT)
  isActive  Boolean  @default(true)
  isVerified Boolean @default(false)
  
  // Argentina specific fields
  dni       String?  @unique // Documento Nacional de Identidad
  cuit      String?  @unique // CUIT for tax purposes
  timezone  String   @default("America/Argentina/Buenos_Aires")
  locale    String   @default("es-AR")
  
  // Profile fields
  avatar    String?
  birthDate DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clientBookings   Booking[] @relation("ClientBookings")
  provider         Provider?
  refreshTokens    RefreshToken[]
  notifications    Notification[]

  @@map("users")
}

model Provider {
  id           String  @id @default(cuid())
  userId       String  @unique
  businessName String
  description  String?
  address      String
  city         String
  province     String  @default("Buenos Aires")
  country      String  @default("Argentina")
  postalCode   String?
  
  // Contact information
  businessPhone String?
  businessEmail String?
  website      String?
  
  // Business details
  taxId        String? // CUIT/CUIL
  businessType String? // Barber Shop, Salon, etc.
  
  // Availability and settings
  workingHours Json? // JSON object with schedule
  isVerified   Boolean @default(false)
  isActive     Boolean @default(true)
  
  // Geo location for search
  latitude  Float?
  longitude Float?
  
  // Media
  logo        String?
  coverImage  String?
  images      String[] // Array of image URLs
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  services Service[]
  bookings Booking[]

  @@map("providers")
}

model Service {
  id          String  @id @default(cuid())
  name        String
  description String?
  duration    Int     // minutes
  price       Decimal @db.Decimal(10, 2) // ARS pricing
  isActive    Boolean @default(true)
  category    String? // Haircut, Beard, Styling, etc.
  
  // Provider relation
  providerId  String
  
  // Media
  images      String[] // Array of image URLs
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  provider Provider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@map("services")
}

model Booking {
  id          String        @id @default(cuid())
  clientId    String
  serviceId   String
  providerId  String
  
  // Appointment details
  startTime   DateTime // in UTC, convert to Argentina timezone
  endTime     DateTime // in UTC, convert to Argentina timezone
  status      BookingStatus @default(PENDING)
  totalAmount Decimal       @db.Decimal(10, 2) // ARS
  
  // Additional information
  notes       String?
  clientNotes String?
  
  // Payment information
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?       // mercadopago, cash, etc.
  paymentId     String?       // External payment ID
  
  // Cancellation
  cancelledBy   String?
  cancelReason  String?
  cancelledAt   DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  client   User     @relation("ClientBookings", fields: [clientId], references: [id], onDelete: Cascade)
  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  payment  Payment?

  @@map("bookings")
}

model Payment {
  id        String        @id @default(cuid())
  bookingId String        @unique
  
  // Payment details
  amount         Decimal       @db.Decimal(10, 2)
  currency       String        @default("ARS")
  status         PaymentStatus @default(PENDING)
  paymentMethod  String        // mercadopago, cash, transfer
  
  // External payment gateway data
  externalId     String? // MercadoPago payment ID
  externalStatus String?
  gatewayData    Json?   // Raw gateway response
  
  // Metadata
  description    String?
  metadata       Json?
  
  // Timestamps
  paidAt      DateTime?
  failedAt    DateTime?
  refundedAt  DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Notification {
  id       String             @id @default(cuid())
  userId   String
  title    String
  message  String
  type     NotificationType
  status   NotificationStatus @default(UNREAD)
  
  // Metadata
  data     Json? // Additional data for the notification
  
  // Timestamps
  readAt   DateTime?
  sentAt   DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum UserRole {
  CLIENT
  PROVIDER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum NotificationType {
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  BOOKING_REMINDER
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  SYSTEM_ANNOUNCEMENT
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}