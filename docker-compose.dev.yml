# BarberPro Development Environment
# Uses Dockerfile.dev files for fast development with hot reloading
version: '3.8'

# Load environment variables from .env files
env_file:
  - .env  # Services configuration only

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: barberpro-postgres-dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-barberpro_dev}
      POSTGRES_USER: ${POSTGRES_USER:-barberpro}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-barberpro_dev_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - barberpro-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U barberpro -d barberpro_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: barberpro-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
      - ./docker/configs/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - barberpro-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API (Development)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: barberpro-backend-dev
    env_file:
      - ./backend/.env  # Backend-specific environment variables
    environment:
      # Override database URL for Docker network
      DATABASE_URL: postgresql://${POSTGRES_USER:-barberpro}:${POSTGRES_PASSWORD:-barberpro_dev_password}@postgres:5432/${POSTGRES_DB:-barberpro_dev}
      REDIS_URL: redis://redis:6379
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - /app/dist
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - barberpro-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: barberpro-frontend-dev
    env_file:
      - ./frontend/.env  # Frontend-specific environment variables
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/build
    depends_on:
      - backend
    networks:
      - barberpro-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Database Administration (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:7
    container_name: barberpro-pgadmin-dev
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - barberpro-dev-network
    restart: unless-stopped

  # Redis Admin Interface
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: barberpro-redis-commander-dev
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: ${REDIS_COMMANDER_USER}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - barberpro-dev-network
    restart: unless-stopped

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  pgadmin_dev_data:
    driver: local

networks:
  barberpro-dev-network:
    driver: bridge
