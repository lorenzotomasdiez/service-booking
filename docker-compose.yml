# BarberPro Production-Ready Environment
# Uses production Dockerfiles with optimized settings
# For development, use: docker-compose -f docker-compose.dev.yml up
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: barberpro-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-barberpro_dev}
      POSTGRES_USER: ${POSTGRES_USER:-barberpro}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-barberpro_dev_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - barberpro-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U barberpro -d barberpro_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: barberpro-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - barberpro-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API (Production Build)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: barberpro-backend
    env_file:
      - ./backend/.env  # Backend-specific environment variables
    environment:
      # Override database URL for Docker network
      DATABASE_URL: postgresql://${POSTGRES_USER:-barberpro}:${POSTGRES_PASSWORD:-barberpro_dev_password}@postgres:5432/${POSTGRES_DB:-barberpro_dev}
      REDIS_URL: redis://redis:6379
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - barberpro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend (Production Build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: barberpro-frontend
    env_file:
      - ./frontend/.env  # Frontend-specific environment variables
    ports:
      - "5173:80"
    depends_on:
      - backend
    networks:
      - barberpro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Database Administration (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:7
    container_name: barberpro-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - barberpro-network
    restart: unless-stopped

  # Redis Admin Interface
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: barberpro-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: ${REDIS_COMMANDER_USER}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - barberpro-network
    restart: unless-stopped

  # MailHog - Email Testing Service
  mailhog:
    image: mailhog/mailhog:latest
    container_name: barberpro-mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - barberpro-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  barberpro-network:
    driver: bridge