# BarberPro Environment Variables Template
# Copy this file to .env and customize for your environment
# Copy to docker/.env for Docker-specific variables
# Copy to backend/.env and frontend/.env for service-specific variables

# ============================================================================
# ENVIRONMENT VARIABLE HIERARCHY
# ============================================================================
# Variables are loaded in the following order (later values override earlier):
# 1. This .env file (root level or docker/.env)
# 2. docker-compose.yml (base configuration)
# 3. docker-compose.dev.yml or docker-compose.prod.yml (environment-specific)
# 4. Service-specific environment blocks (backend/.env, frontend/.env)
# ============================================================================

# ============================================================================
# ENVIRONMENT SELECTION
# ============================================================================
# Options: development, production, test
NODE_ENV=development

# ============================================================================
# DATABASE CONFIGURATION (PostgreSQL 16)
# ============================================================================
# Database name (use different names for dev/prod/test)
POSTGRES_DB=barberpro_dev
# POSTGRES_DB=barberpro_prod  # For production
# POSTGRES_DB=barberpro_test  # For testing

# Database user
POSTGRES_USER=barberpro

# Database password (CHANGE IN PRODUCTION!)
POSTGRES_PASSWORD=barberpro_dev_password
# POSTGRES_PASSWORD=your_secure_production_password  # For production

# Database connection URL (automatically constructed)
# Format: postgresql://USER:PASSWORD@HOST:PORT/DATABASE
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}

# ============================================================================
# REDIS CONFIGURATION
# ============================================================================
# Redis connection URL
REDIS_URL=redis://redis:6379

# Redis password (optional, recommended for production)
# REDIS_PASSWORD=your_redis_password

# ============================================================================
# ADMIN TOOLS CREDENTIALS
# ============================================================================
# pgAdmin (PostgreSQL web admin interface - http://localhost:8080)
PGADMIN_DEFAULT_EMAIL=admin@barberpro.local
PGADMIN_DEFAULT_PASSWORD=admin
# PGADMIN_DEFAULT_EMAIL=admin@yourdomain.com  # For production
# PGADMIN_DEFAULT_PASSWORD=your_secure_pgadmin_password  # For production

# Redis Commander (Redis web admin interface - http://localhost:8081)
REDIS_COMMANDER_USER=admin
REDIS_COMMANDER_PASSWORD=admin
# REDIS_COMMANDER_USER=admin  # For production
# REDIS_COMMANDER_PASSWORD=your_secure_redis_commander_password  # For production

# ============================================================================
# BACKEND API CONFIGURATION
# ============================================================================
# Server port
BACKEND_PORT=3000

# JWT Authentication
JWT_SECRET=dev_jwt_secret_change_in_production
# JWT_SECRET=your_super_secure_random_jwt_secret_at_least_32_chars  # For production
JWT_EXPIRES_IN=7d

# Logging level (debug, info, warn, error)
LOG_LEVEL=debug
# LOG_LEVEL=warn  # For production

# API URLs
API_BASE_URL=http://localhost:3000
APP_URL=http://localhost:5173
FRONTEND_URL=http://localhost:5173
# API_BASE_URL=https://api.barberpro.com.ar  # For production
# APP_URL=https://barberpro.com.ar  # For production
# FRONTEND_URL=https://barberpro.com.ar  # For production

# CORS Configuration
CORS_ORIGIN=*
# CORS_ORIGIN=https://barberpro.com.ar  # For production (restrict to your domain)

# ============================================================================
# ARGENTINA-SPECIFIC CONFIGURATION
# ============================================================================
# Timezone for Argentina
TIMEZONE=America/Argentina/Buenos_Aires

# Locale (Spanish - Argentina)
LOCALE=es-AR

# Currency
CURRENCY=ARS

# ============================================================================
# MERCADOPAGO PAYMENT INTEGRATION
# ============================================================================
# MercadoPago environment (sandbox or production)
MERCADOPAGO_ENVIRONMENT=sandbox
# MERCADOPAGO_ENVIRONMENT=production  # For production

# MercadoPago credentials (get from https://www.mercadopago.com.ar/developers)
MERCADOPAGO_ACCESS_TOKEN=your_mercadopago_access_token
MERCADOPAGO_PUBLIC_KEY=your_mercadopago_public_key

# MercadoPago webhook secret for signature verification
MERCADOPAGO_WEBHOOK_SECRET=your_webhook_secret

# ============================================================================
# AFIP INTEGRATION (Argentina Tax Agency)
# ============================================================================
# AFIP environment (sandbox or production)
AFIP_ENVIRONMENT=sandbox
# AFIP_ENVIRONMENT=production  # For production

# AFIP credentials
AFIP_CUIT=your_company_cuit
AFIP_CERTIFICATE=path/to/certificate.crt
AFIP_PRIVATE_KEY=path/to/private.key

# ============================================================================
# WHATSAPP BUSINESS INTEGRATION
# ============================================================================
# WhatsApp Business phone number (format: +54 9 11 1234 5678)
WHATSAPP_BUSINESS_PHONE=+5491112345678

# WhatsApp Business API credentials
WHATSAPP_ACCESS_TOKEN=your_whatsapp_access_token
WHATSAPP_WEBHOOK_VERIFY_TOKEN=your_webhook_verify_token

# ============================================================================
# FRONTEND CONFIGURATION (SvelteKit + Vite)
# ============================================================================
# API endpoint URLs
VITE_API_URL=http://localhost:3000
VITE_WS_URL=ws://localhost:3000
# VITE_API_URL=https://api.barberpro.com.ar  # For production
# VITE_WS_URL=wss://api.barberpro.com.ar  # For production

# Argentina configuration (frontend)
VITE_TIMEZONE=America/Argentina/Buenos_Aires
VITE_LOCALE=es-AR
VITE_CURRENCY=ARS

# MercadoPago public key (frontend)
VITE_MERCADOPAGO_PUBLIC_KEY=your_mercadopago_public_key

# ============================================================================
# MONITORING AND APM (Application Performance Monitoring)
# ============================================================================
# Sentry error tracking (backend and frontend)
SENTRY_DSN=your_sentry_dsn
VITE_SENTRY_DSN=your_frontend_sentry_dsn

# New Relic APM (optional)
NEWRELIC_LICENSE_KEY=your_newrelic_license_key

# Datadog APM (optional)
DATADOG_API_KEY=your_datadog_api_key

# ============================================================================
# ANALYTICS
# ============================================================================
# Google Analytics (frontend)
GOOGLE_ANALYTICS_ID=G-XXXXXXXXXX

# Hotjar analytics (frontend)
HOTJAR_ID=your_hotjar_id

# ============================================================================
# RATE LIMITING
# ============================================================================
# Maximum requests per window
RATE_LIMIT_MAX_REQUESTS=200

# Time window in milliseconds (900000 = 15 minutes)
RATE_LIMIT_WINDOW_MS=900000

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================
# BCrypt salt rounds for password hashing (higher = more secure but slower)
BCRYPT_SALT_ROUNDS=10
# BCRYPT_SALT_ROUNDS=12  # For production

# Enable debug mode (never use in production!)
APP_DEBUG=true
# APP_DEBUG=false  # For production

# Enable Swagger API documentation (never use in production!)
ENABLE_SWAGGER=true
# ENABLE_SWAGGER=false  # For production

# ============================================================================
# EMAIL CONFIGURATION (for notifications and monitoring)
# ============================================================================
# SMTP configuration for Grafana and notifications
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your_email@gmail.com
SMTP_PASS=your_smtp_password

# ============================================================================
# BACKUP CONFIGURATION (Production only)
# ============================================================================
# S3 bucket for database backups
BACKUP_S3_BUCKET=barberpro-backups
BACKUP_S3_ACCESS_KEY=your_aws_access_key
BACKUP_S3_SECRET_KEY=your_aws_secret_key

# ============================================================================
# GRAFANA MONITORING (Production only)
# ============================================================================
# Grafana admin password
GRAFANA_ADMIN_PASSWORD=your_secure_grafana_password

# ============================================================================
# ENVIRONMENT-SPECIFIC NOTES
# ============================================================================
#
# DEVELOPMENT ENVIRONMENT:
# - Use *_dev database and volume names
# - Enable hot reload with volume mounts
# - Use lenient health checks (faster intervals)
# - Enable debug tools (Swagger, detailed logs)
# - Use weak passwords (convenient for local development)
# - Expose all ports for debugging
#
# PRODUCTION ENVIRONMENT:
# - Use *_prod database and volume names
# - NO volume mounts (use container images only)
# - Use strict health checks (longer intervals)
# - Disable debug tools (APP_DEBUG=false, ENABLE_SWAGGER=false)
# - Use strong passwords (CHANGE ALL DEFAULTS!)
# - Restrict port exposure (only nginx 80/443)
# - Enable monitoring (Sentry, New Relic, etc.)
# - Configure backups to S3
# - Set CORS_ORIGIN to your domain
# - Use production payment/AFIP credentials
# - Configure SSL certificates
#
# TESTING ENVIRONMENT:
# - Use *_test database (isolated from dev/prod)
# - Use lower resource limits for CI/CD
# - Use fast health checks for quick startup
# - Mock external services (MercadoPago, AFIP, WhatsApp)
#
# ============================================================================
# QUICK START COMMANDS
# ============================================================================
#
# Development:
#   docker-compose -f docker/docker-compose.yml -f docker/docker-compose.dev.yml up
#
# Production:
#   docker-compose -f docker/docker-compose.yml -f docker/docker-compose.prod.yml up -d
#
# Production with admin tools (temporary):
#   docker-compose -f docker/docker-compose.yml -f docker/docker-compose.prod.yml --profile admin-tools up -d
#
# Testing:
#   docker-compose -f docker/docker-compose.yml -f docker/docker-compose.test.yml up
#
# View logs:
#   docker-compose logs -f [service_name]
#
# Stop services:
#   docker-compose down
#
# Stop services and remove volumes:
#   docker-compose down -v
#
# ============================================================================
