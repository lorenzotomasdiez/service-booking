# =============================================================================
# ARGENTINA SERVICE MOCKS - Docker Compose Configuration
# =============================================================================
#
# This file consolidates all Argentina-specific service mocks into a single
# docker-compose file for easy development and testing without requiring
# connections to real external services.
#
# MOCK SERVICES:
# - MercadoPago Mock: Argentina's primary payment gateway (port 3001)
# - AFIP Mock: Tax authority integration for invoicing (port 3002)
# - WhatsApp Business Mock: Customer communication channel (port 3003)
# - SMS Mock: SMS gateway for notifications (port 3004)
# - MailHog: Email capture and testing (ports 1025, 8025)
#
# USAGE:
#   docker-compose -f docker/docker-compose.mocks.yml up -d
#   or use: make mocks
#
# =============================================================================

version: '3.9'

networks:
  barberpro-network:
    external: true
    name: barberpro-network

services:
  # ---------------------------------------------------------------------------
  # MERCADOPAGO MOCK - Payment Gateway
  # ---------------------------------------------------------------------------
  mercadopago-mock:
    build:
      context: ./mocks/mercadopago
      dockerfile: Dockerfile
    container_name: barberpro-mercadopago-mock
    ports:
      - "3001:3001"
    environment:
      PORT: 3001
      WEBHOOK_URL: ${MERCADOPAGO_WEBHOOK_URL:-http://backend:3000/api/webhooks/mercadopago}
      DEFAULT_SCENARIO: ${MERCADOPAGO_DEFAULT_SCENARIO:-success}
      NODE_ENV: ${NODE_ENV:-development}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    networks:
      - barberpro-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # ---------------------------------------------------------------------------
  # AFIP MOCK - Tax Authority Integration
  # ---------------------------------------------------------------------------
  afip-mock:
    build:
      context: ./mocks/afip
      dockerfile: Dockerfile
    container_name: barberpro-afip-mock
    ports:
      - "3002:3002"
    environment:
      PORT: 3002
      DB_PATH: /app/data/afip.db
      NODE_ENV: ${NODE_ENV:-development}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - afip-data:/app/data
    networks:
      - barberpro-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # ---------------------------------------------------------------------------
  # WHATSAPP MOCK - Business Messaging
  # ---------------------------------------------------------------------------
  whatsapp-mock:
    build:
      context: ./mocks/whatsapp
      dockerfile: Dockerfile
    container_name: barberpro-whatsapp-mock
    ports:
      - "3003:3003"
    environment:
      PORT: 3003
      WEBHOOK_URL: ${WHATSAPP_WEBHOOK_URL:-http://backend:3000/api/webhooks/whatsapp}
      NODE_ENV: ${NODE_ENV:-development}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    networks:
      - barberpro-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3003/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # ---------------------------------------------------------------------------
  # SMS MOCK - SMS Gateway
  # ---------------------------------------------------------------------------
  sms-mock:
    build:
      context: ./mocks/sms
      dockerfile: Dockerfile
    container_name: barberpro-sms-mock
    ports:
      - "3004:3004"
    environment:
      PORT: 3004
      WEBHOOK_URL: ${SMS_WEBHOOK_URL:-http://backend:3000/api/webhooks/sms}
      COST_PER_SEGMENT: ${SMS_COST_PER_SEGMENT:-0.05}
      NODE_ENV: ${NODE_ENV:-development}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    networks:
      - barberpro-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3004/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # ---------------------------------------------------------------------------
  # MAILHOG - Email Testing
  # ---------------------------------------------------------------------------
  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: barberpro-mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - barberpro-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8025"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  afip-data:
    driver: local
    name: barberpro-afip-data

# =============================================================================
# MOCK SERVICE DOCUMENTATION
# =============================================================================
#
# MercadoPago Mock API Endpoints:
#   POST /v1/payments - Create payment
#   GET /v1/payments/:id - Get payment status
#   POST /v1/payments/:id/refunds - Refund payment
#   GET /v1/payment_methods - List payment methods
#   GET /health - Health check
#   GET /dashboard - Payment dashboard
#   GET /docs - Swagger documentation
#
# AFIP Mock API Endpoints:
#   POST /ws/services/FEv1 - Electronic invoice service
#   GET /ws/services/FEv1/FEParamGetTiposCbte - Get invoice types
#   GET /ws/services/FEv1/FEParamGetTiposDoc - Get document types
#   POST /ws/services/FEv1/FECAESolicitar - Request CAE
#   POST /ws/services/FEv1/FECompConsultar - Query invoice
#   GET /health - Health check
#   GET /docs - API documentation
#
# WhatsApp Mock API Endpoints:
#   POST /v1/messages - Send message
#   POST /v1/messages/template - Send template message
#   GET /v1/messages/:id - Get message status
#   POST /v1/media - Upload media
#   GET /v1/media/:id - Download media
#   GET /health - Health check
#   GET /dashboard - Message dashboard
#
# SMS Mock API Endpoints:
#   POST /v1/sms - Send SMS
#   GET /v1/sms/:id - Get SMS status
#   POST /v1/sms/bulk - Send bulk SMS
#   GET /health - Health check
#   GET /dashboard - SMS dashboard
#   GET /stats - Get SMS statistics
#
# MailHog Endpoints:
#   SMTP: localhost:1025 - Send emails
#   Web UI: http://localhost:8025 - View captured emails
#   API: http://localhost:8025/api/v2/messages - Access via API
#
# =============================================================================
# RESOURCE USAGE
# =============================================================================
#
# Combined resource usage for all 5 mock services:
#   Memory: ~1GB (256M × 4 + 128M)
#   CPU: ~1.25 cores maximum (0.25 × 5)
#
# Services are lightweight and designed to run alongside main development
# environment without significant performance impact.
#
# =============================================================================
