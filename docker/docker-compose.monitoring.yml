# =============================================================================
# MONITORING STACK - PHASE 3 PLACEHOLDER
# =============================================================================
#
# This file is a placeholder for the Phase 3 monitoring infrastructure.
# It will provide comprehensive observability for the BarberPro platform.
#
# IMPLEMENTATION TIMELINE: Phase 3 (After core functionality is stable)
#
# MONITORING COMPONENTS:
# - Prometheus: Metrics collection and storage
# - Grafana: Visualization dashboards and alerting
# - Loki: Log aggregation and querying
#
# USAGE (once implemented):
#   docker-compose -f docker/docker-compose.yml \
#                  -f docker/docker-compose.monitoring.yml up -d
#
# =============================================================================

version: '3.9'

# SERVICES PLACEHOLDER
# Uncomment and configure when implementing Phase 3 monitoring

services:
  # ---------------------------------------------------------------------------
  # PROMETHEUS - Metrics Collection & Storage
  # ---------------------------------------------------------------------------
  # prometheus:
  #   image: prom/prometheus:v2.47.0
  #   container_name: barberpro-prometheus
  #   restart: unless-stopped
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/usr/share/prometheus/console_libraries'
  #     - '--web.console.templates=/usr/share/prometheus/consoles'
  #     - '--storage.tsdb.retention.time=30d'
  #     - '--web.enable-lifecycle'
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - ./configs/alert.rules.yml:/etc/prometheus/alert.rules.yml:ro
  #     - prometheus_data:/prometheus
  #   networks:
  #     - barberpro-network
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.5'
  #         memory: 512M
  #       reservations:
  #         cpus: '0.25'
  #         memory: 256M

  # ---------------------------------------------------------------------------
  # GRAFANA - Visualization & Dashboards
  # ---------------------------------------------------------------------------
  # grafana:
  #   image: grafana/grafana:10.1.5
  #   container_name: barberpro-grafana
  #   restart: unless-stopped
  #   ports:
  #     - "3001:3000"  # Using 3001 to avoid conflict with backend
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #     - GF_SERVER_ROOT_URL=http://localhost:3001
  #     - GF_INSTALL_PLUGINS=redis-datasource
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
  #     - ./configs/grafana/dashboards:/var/lib/grafana/dashboards:ro
  #   depends_on:
  #     - prometheus
  #     - loki
  #   networks:
  #     - barberpro-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.5'
  #         memory: 512M
  #       reservations:
  #         cpus: '0.25'
  #         memory: 256M

  # ---------------------------------------------------------------------------
  # LOKI - Log Aggregation
  # ---------------------------------------------------------------------------
  # loki:
  #   image: grafana/loki:2.9.2
  #   container_name: barberpro-loki
  #   restart: unless-stopped
  #   ports:
  #     - "3100:3100"
  #   command: -config.file=/etc/loki/local-config.yaml
  #   volumes:
  #     - ./configs/loki-config.yml:/etc/loki/local-config.yaml:ro
  #     - loki_data:/loki
  #   networks:
  #     - barberpro-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.25'
  #         memory: 256M
  #       reservations:
  #         cpus: '0.1'
  #         memory: 128M

  # ---------------------------------------------------------------------------
  # PROMTAIL - Log Shipping (Optional)
  # ---------------------------------------------------------------------------
  # promtail:
  #   image: grafana/promtail:2.9.2
  #   container_name: barberpro-promtail
  #   restart: unless-stopped
  #   volumes:
  #     - ./configs/promtail-config.yml:/etc/promtail/config.yml:ro
  #     - /var/log:/var/log:ro
  #     - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #   command: -config.file=/etc/promtail/config.yml
  #   depends_on:
  #     - loki
  #   networks:
  #     - barberpro-network
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.25'
  #         memory: 128M

  # ---------------------------------------------------------------------------
  # NODE EXPORTER - System Metrics (Optional)
  # ---------------------------------------------------------------------------
  # node-exporter:
  #   image: prom/node-exporter:v1.6.1
  #   container_name: barberpro-node-exporter
  #   restart: unless-stopped
  #   command:
  #     - '--path.rootfs=/host'
  #   pid: host
  #   volumes:
  #     - /:/host:ro,rslave
  #   networks:
  #     - barberpro-network
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.1'
  #         memory: 64M

  # Placeholder service to prevent empty services section
  monitoring-placeholder:
    image: alpine:3.18
    container_name: barberpro-monitoring-placeholder
    command: echo "Monitoring stack placeholder - Implement in Phase 3"

# NETWORKS
networks:
  barberpro-network:
    external: true
    name: barberpro-network

# VOLUMES PLACEHOLDER
# volumes:
#   prometheus_data:
#     name: barberpro-prometheus-data
#   grafana_data:
#     name: barberpro-grafana-data
#   loki_data:
#     name: barberpro-loki-data

# =============================================================================
# PHASE 3 IMPLEMENTATION CHECKLIST
# =============================================================================
#
# Configuration Files to Create:
# [ ] docker/configs/prometheus.yml - Scrape configs for all services
# [ ] docker/configs/alert.rules.yml - Alert rules for critical metrics
# [ ] docker/configs/loki-config.yml - Loki storage and retention config
# [ ] docker/configs/promtail-config.yml - Log collection configuration
# [ ] docker/configs/grafana/provisioning/datasources/datasources.yml
# [ ] docker/configs/grafana/dashboards/ - Pre-built dashboard JSONs
#
# Metrics to Collect:
# [ ] Backend API: Request rate, latency, error rate, active connections
# [ ] Database: Connection pool usage, query performance, replication lag
# [ ] Redis: Hit/miss rate, memory usage, eviction rate
# [ ] System: CPU, memory, disk I/O, network I/O
# [ ] Business: Bookings created, payment success rate, user signups
#
# Dashboards to Create:
# [ ] Application Overview - High-level health and performance
# [ ] API Performance - Endpoint latency and error rates
# [ ] Database Performance - Query stats and connection pools
# [ ] Infrastructure - System resource utilization
# [ ] Business Metrics - Booking trends and user activity
#
# Alerting Rules:
# [ ] High error rate (>5% for 5 minutes)
# [ ] API latency P95 >500ms for 5 minutes
# [ ] Database connection pool >80% for 10 minutes
# [ ] Redis memory usage >80%
# [ ] Disk space <10% remaining
# [ ] Service down/unhealthy for >1 minute
#
# =============================================================================
