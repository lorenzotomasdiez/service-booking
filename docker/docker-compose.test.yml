# =============================================================================
# TESTING ENVIRONMENT COMPOSE FILE
# =============================================================================
#
# This file defines isolated test infrastructure for CI/CD pipelines and
# local testing. All services are optimized for fast startup and teardown.
#
# USAGE:
#   # Start test environment
#   docker-compose -f docker/docker-compose.test.yml up -d
#
#   # Run tests
#   npm test
#
#   # Clean up
#   docker-compose -f docker/docker-compose.test.yml down -v
#
# FEATURES:
# - Isolated from development/production databases
# - Fast health checks for quick CI/CD startup
# - Lower resource limits for parallel test execution
# - Separate network and volumes
# - Ephemeral data (easily reset between test runs)
#
# =============================================================================

version: '3.9'

services:
  # ---------------------------------------------------------------------------
  # POSTGRESQL TEST DATABASE
  # ---------------------------------------------------------------------------
  postgres-test:
    image: postgres:16-alpine
    container_name: barberpro-postgres-test
    restart: unless-stopped
    environment:
      # Test database credentials
      POSTGRES_DB: ${POSTGRES_TEST_DB:-barberpro_test}
      POSTGRES_USER: ${POSTGRES_TEST_USER:-barberpro_test}
      POSTGRES_PASSWORD: ${POSTGRES_TEST_PASSWORD:-test_password_change_in_ci}
      # Performance tuning for tests (prioritize speed over durability)
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    ports:
      - "${POSTGRES_TEST_PORT:-5433}:5432"  # Different port to avoid conflicts
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      # Optional: Custom test-specific postgres config
      # - ./configs/postgres-test.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - barberpro-test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_TEST_USER:-barberpro_test} -d ${POSTGRES_TEST_DB:-barberpro_test}"]
      interval: 5s    # Fast checks for CI/CD
      timeout: 3s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    command: >
      postgres
      -c shared_buffers=32MB
      -c max_connections=50
      -c fsync=off
      -c synchronous_commit=off
      -c full_page_writes=off
      -c wal_level=minimal
      -c max_wal_senders=0
    # Labels for identification
    labels:
      com.barberpro.environment: "test"
      com.barberpro.service: "postgres"
      com.barberpro.description: "PostgreSQL test database for CI/CD"

  # ---------------------------------------------------------------------------
  # REDIS TEST INSTANCE
  # ---------------------------------------------------------------------------
  redis-test:
    image: redis:7-alpine
    container_name: barberpro-redis-test
    restart: unless-stopped
    ports:
      - "${REDIS_TEST_PORT:-6380}:6379"  # Different port to avoid conflicts
    volumes:
      - redis_test_data:/data
      # Test-specific redis config (no persistence, faster startup)
      - ./configs/redis-test.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - barberpro-test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s    # Fast checks for CI/CD
      timeout: 3s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    command: >
      redis-server
      /usr/local/etc/redis/redis.conf
      --maxmemory 64mb
      --maxmemory-policy allkeys-lru
      --save ""
      --appendonly no
    # Labels for identification
    labels:
      com.barberpro.environment: "test"
      com.barberpro.service: "redis"
      com.barberpro.description: "Redis test instance for CI/CD"

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  barberpro-test-network:
    name: barberpro-test-network
    driver: bridge
    labels:
      com.barberpro.environment: "test"
      com.barberpro.description: "Isolated network for test environment"

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_test_data:
    name: barberpro-postgres-test-data
    driver: local
    labels:
      com.barberpro.environment: "test"
      com.barberpro.service: "postgres"
      com.barberpro.description: "PostgreSQL test database storage"

  redis_test_data:
    name: barberpro-redis-test-data
    driver: local
    labels:
      com.barberpro.environment: "test"
      com.barberpro.service: "redis"
      com.barberpro.description: "Redis test instance storage"

# =============================================================================
# USAGE EXAMPLES
# =============================================================================
#
# Start test environment:
#   docker-compose -f docker/docker-compose.test.yml up -d
#
# Wait for services to be healthy:
#   docker-compose -f docker/docker-compose.test.yml ps
#
# Run migrations on test database:
#   cd backend
#   DATABASE_URL="postgresql://barberpro_test:test_password_change_in_ci@localhost:5433/barberpro_test" \
#     npm run db:migrate
#
# Run backend tests:
#   cd backend
#   npm test
#
# Run frontend tests:
#   cd frontend
#   npm test
#
# View logs:
#   docker-compose -f docker/docker-compose.test.yml logs -f
#
# Stop and remove containers (keep volumes):
#   docker-compose -f docker/docker-compose.test.yml down
#
# Stop and remove everything including volumes:
#   docker-compose -f docker/docker-compose.test.yml down -v
#
# =============================================================================
# ENVIRONMENT VARIABLES
# =============================================================================
#
# Create a .env.test file or export these in CI/CD:
#
# # PostgreSQL Test Configuration
# POSTGRES_TEST_DB=barberpro_test
# POSTGRES_TEST_USER=barberpro_test
# POSTGRES_TEST_PASSWORD=test_password_change_in_ci
# POSTGRES_TEST_PORT=5433
#
# # Redis Test Configuration
# REDIS_TEST_PORT=6380
#
# # Backend Test Configuration
# DATABASE_URL=postgresql://barberpro_test:test_password_change_in_ci@localhost:5433/barberpro_test
# REDIS_URL=redis://localhost:6380
# NODE_ENV=test
# JWT_SECRET=test_jwt_secret_change_in_ci
#
# =============================================================================
# CI/CD INTEGRATION
# =============================================================================
#
# GitHub Actions Example:
#
# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#
#       - name: Start test infrastructure
#         run: docker-compose -f docker/docker-compose.test.yml up -d
#
#       - name: Wait for services
#         run: |
#           timeout 30 sh -c 'until docker-compose -f docker/docker-compose.test.yml ps | grep -q "healthy"; do sleep 1; done'
#
#       - name: Run migrations
#         run: cd backend && npm run db:migrate
#         env:
#           DATABASE_URL: postgresql://barberpro_test:test_password@localhost:5433/barberpro_test
#
#       - name: Run tests
#         run: npm test
#
#       - name: Cleanup
#         if: always()
#         run: docker-compose -f docker/docker-compose.test.yml down -v
#
# GitLab CI Example:
#
# test:
#   image: docker:latest
#   services:
#     - docker:dind
#   before_script:
#     - docker-compose -f docker/docker-compose.test.yml up -d
#     - sleep 10  # Wait for services to be ready
#   script:
#     - cd backend && npm run db:migrate
#     - npm test
#   after_script:
#     - docker-compose -f docker/docker-compose.test.yml down -v
#
# =============================================================================
# TEST DATABASE MANAGEMENT
# =============================================================================
#
# Reset test database (drop and recreate):
#   docker-compose -f docker/docker-compose.test.yml down -v
#   docker-compose -f docker/docker-compose.test.yml up -d
#   cd backend && npm run db:migrate
#
# Seed test database:
#   cd backend
#   DATABASE_URL="postgresql://barberpro_test:test_password_change_in_ci@localhost:5433/barberpro_test" \
#     npm run db:seed
#
# Access test database directly:
#   docker exec -it barberpro-postgres-test psql -U barberpro_test -d barberpro_test
#
# Access test redis:
#   docker exec -it barberpro-redis-test redis-cli
#
# =============================================================================
# PERFORMANCE TUNING FOR TESTS
# =============================================================================
#
# PostgreSQL is configured for speed over durability in tests:
# - fsync=off: Don't wait for disk writes
# - synchronous_commit=off: Don't wait for WAL writes
# - full_page_writes=off: Reduce WAL size
# - wal_level=minimal: Minimal WAL logging
# - Reduced shared_buffers and connections
#
# Redis is configured for minimal persistence:
# - save "": Disable RDB snapshots
# - appendonly no: Disable AOF
# - maxmemory 64mb: Low memory footprint
# - allkeys-lru: Evict oldest keys when full
#
# WARNING: These settings sacrifice durability for speed.
# DO NOT use these settings in production!
#
# =============================================================================
