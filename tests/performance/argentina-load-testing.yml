# Performance Testing Configuration for BarberPro Argentina Market
# Day 8 Advanced Testing Framework - Load Testing Scenarios
# 
# Tests system performance under various Argentina-specific scenarios:
# - Peak booking periods
# - Multi-city concurrent usage
# - Psychology vertical load
# - MercadoPago payment processing under load

config:
  target: "http://localhost:3000"
  phases:
    # Warm-up phase
    - duration: 60
      arrivalRate: 5
      name: "Warm-up"
    
    # Normal business hours in Argentina (9 AM - 6 PM)
    - duration: 300
      arrivalRate: 25
      name: "Business hours baseline"
    
    # Peak booking period (lunch time 12-2 PM)
    - duration: 120
      arrivalRate: 75
      name: "Lunch rush peak"
    
    # Evening booking spike (6-8 PM)
    - duration: 180
      arrivalRate: 100
      name: "Evening booking rush"
    
    # Weekend peak load simulation
    - duration: 240
      arrivalRate: 150
      name: "Weekend peak load"
    
    # Stress test - 5x normal capacity
    - duration: 120
      arrivalRate: 500
      name: "Stress test 5x capacity"

  # Argentina-specific configuration
  environments:
    argentina:
      target: "https://barberpro-argentina.railway.app"
      phases:
        - duration: 600
          arrivalRate: 200
          name: "Argentina production load test"

  # Performance targets for Argentina market
  ensure:
    # Response time targets
    - http.response_time.p95: 450  # 95th percentile under 450ms
    - http.response_time.p99: 800  # 99th percentile under 800ms
    - http.response_time.max: 2000 # Max response time under 2 seconds
    
    # Success rate targets
    - http.codes.200: 98           # 98% success rate minimum
    - http.codes.201: 95           # 95% creation success rate
    - http.codes.4xx: 2            # Less than 2% client errors
    - http.codes.5xx: 0.5          # Less than 0.5% server errors

  # Load testing plugins
  plugins:
    - expect: {}
    - metrics-by-endpoint: {}
    - publish-metrics:
        - type: prometheus
          target: "http://localhost:9090"
    - hdrhistogram: {}

# Test scenarios
scenarios:
  # Core booking flow performance
  - name: "Argentina booking flow"
    weight: 40
    flow:
      - get:
          url: "/api/health"
          expect:
            - statusCode: 200
      
      # Search for providers in major Argentina cities
      - get:
          url: "/api/providers/search"
          qs:
            location: "{{ $randomItem(['Buenos Aires', 'Córdoba', 'Rosario', 'La Plata', 'Mendoza']) }}"
            category: "{{ $randomItem(['barberia', 'psicologia', 'estetica']) }}"
            radius: "{{ $randomInt(5, 25) }}"
          expect:
            - statusCode: 200
            - hasProperty: "providers"
      
      # Get provider details
      - get:
          url: "/api/providers/{{ providerId }}"
          beforeRequest: "setProviderId"
          expect:
            - statusCode: 200
            - hasProperty: "id"
            - hasProperty: "services"
      
      # Check availability
      - get:
          url: "/api/providers/{{ providerId }}/availability"
          qs:
            date: "{{ $randomDate() }}"
          expect:
            - statusCode: 200
            - hasProperty: "availableSlots"
      
      # Create booking
      - post:
          url: "/api/bookings"
          headers:
            Authorization: "Bearer {{ authToken }}"
            Content-Type: "application/json"
          json:
            providerId: "{{ providerId }}"
            serviceId: "{{ serviceId }}"
            scheduledFor: "{{ selectedDateTime }}"
            clientData:
              name: "{{ $randomFullName() }}"
              email: "{{ $randomEmail() }}"
              phone: "+549{{ $randomInt(1000000000, 9999999999) }}"
              dni: "{{ $randomInt(10000000, 99999999) }}"
            paymentData:
              amount: "{{ $randomInt(3000, 15000) }}"
              currency: "ARS"
              method: "mercadopago"
          expect:
            - statusCode: 201
            - hasProperty: "id"
            - hasProperty: "status"

  # Psychology vertical specific load testing
  - name: "Psychology booking with privacy compliance"
    weight: 20
    flow:
      # Search psychology specialists
      - get:
          url: "/api/providers/search"
          qs:
            category: "psicologia"
            location: "Buenos Aires"
            specialization: "{{ $randomItem(['cognitivo-conductual', 'psicoanalisis', 'terapia-familiar']) }}"
          expect:
            - statusCode: 200
      
      # GDPR consent validation
      - post:
          url: "/api/psychology/consent-validation"
          json:
            consentTypes:
              - "gdpr_article_9"
              - "mental_health_data"
              - "therapy_recording"
            clientId: "{{ clientId }}"
          expect:
            - statusCode: 200
            - hasProperty: "consentValid"
      
      # Create psychology booking
      - post:
          url: "/api/bookings/psychology"
          headers:
            Authorization: "Bearer {{ authToken }}"
            Content-Type: "application/json"
          json:
            providerId: "{{ psychologyProviderId }}"
            sessionType: "individual"
            duration: 50
            privacyLevel: "high"
            gdprCompliant: true
            mentalHealthConsent: true
          expect:
            - statusCode: 201
            - hasProperty: "sessionId"
            - hasProperty: "privacyLevel"

  # Multi-city Argentina testing
  - name: "Multi-city service coordination"
    weight: 15
    flow:
      # Cross-city provider search
      - get:
          url: "/api/providers/cross-city-search"
          qs:
            fromCity: "Buenos Aires"
            toCity: "{{ $randomItem(['Córdoba', 'Rosario', 'La Plata']) }}"
            maxDistance: 500
            travelCompensation: true
          expect:
            - statusCode: 200
            - hasProperty: "crossCityProviders"
      
      # Calculate travel costs
      - post:
          url: "/api/bookings/calculate-travel"
          json:
            fromLocation: "Buenos Aires"
            toLocation: "{{ destinationCity }}"
            serviceType: "premium"
          expect:
            - statusCode: 200
            - hasProperty: "travelCost"
            - hasProperty: "estimatedTime"

  # Payment processing performance
  - name: "MercadoPago payment processing"
    weight: 20
    flow:
      # Tokenize payment method
      - post:
          url: "/api/payments/tokenize"
          json:
            cardNumber: "4111111111111111"
            expiryMonth: "12"
            expiryYear: "2027"
            cvv: "123"
            cardholderName: "Juan Pérez"
            dni: "{{ $randomInt(10000000, 99999999) }}"
          expect:
            - statusCode: 200
            - hasProperty: "token"
      
      # Process payment
      - post:
          url: "/api/payments/process"
          json:
            token: "{{ paymentToken }}"
            amount: "{{ $randomInt(5000, 20000) }}"
            currency: "ARS"
            installments: "{{ $randomInt(1, 6) }}"
            paymentMethod: "mercadopago"
          expect:
            - statusCode: 200
            - hasProperty: "transactionId"
            - hasProperty: "status"

  # AFIP tax calculation performance
  - name: "Argentina tax calculation"
    weight: 5
    flow:
      - post:
          url: "/api/payments/calculate-tax"
          json:
            amount: "{{ $randomInt(3000, 15000) }}"
            serviceType: "{{ $randomItem(['standard', 'psychology', 'premium']) }}"
            clientType: "consumer"
            location: "{{ $randomItem(['Buenos Aires', 'Córdoba', 'Rosario']) }}"
          expect:
            - statusCode: 200
            - hasProperty: "taxAmount"
            - hasProperty: "totalAmount"
            - hasProperty: "afipCompliant"

# Custom functions for realistic test data
functions:
  setProviderId:
    - log: "Setting provider ID from search results"
  
  $randomDate:
    - log: "Generating random future date"
  
  $randomFullName:
    - log: "Generating random Argentina name"
  
  $randomEmail:
    - log: "Generating random email"

# Argentina-specific load testing scenarios
artillery:
  # Weekend peak load (Argentina timezone)
  weekend_peak:
    phases:
      - duration: 300
        arrivalRate: 180
        name: "Saturday afternoon peak"
      - duration: 240  
        arrivalRate: 220
        name: "Sunday evening prep"
    
  # Holiday season stress test
  holiday_stress:
    phases:
      - duration: 600
        arrivalRate: 300
        name: "Holiday booking rush"
      - duration: 300
        arrivalRate: 500
        name: "New Year preparation peak"

  # Psychology vertical specific load
  psychology_load:
    phases:
      - duration: 180
        arrivalRate: 50
        name: "Psychology session booking peak"
    scenarios:
      - name: "Therapy booking flow"
        weight: 100
        flow:
          - get:
              url: "/api/psychology/specialists"
          - post:
              url: "/api/psychology/privacy-consent"
          - post:
              url: "/api/bookings/therapy-session"

# Performance monitoring and alerting
monitoring:
  prometheus:
    endpoint: "http://localhost:9090"
    metrics:
      - response_time_p95
      - request_rate
      - error_rate
      - argentina_booking_success_rate
      - psychology_booking_compliance_rate
      - mercadopago_payment_success_rate

  grafana:
    dashboard: "argentina-performance-dashboard"
    alerts:
      - metric: "response_time_p95"
        threshold: 450
        action: "alert_team"
      - metric: "error_rate"
        threshold: 2
        action: "scale_infrastructure"

# Load testing for different Argentina network conditions
network_conditions:
  # Buenos Aires - High speed
  buenos_aires:
    bandwidth: 50 # Mbps
    latency: 20   # ms
    packet_loss: 0.1 # %
  
  # Interior cities - Moderate speed
  interior:
    bandwidth: 25 # Mbps
    latency: 50   # ms
    packet_loss: 0.5 # %
  
  # Mobile 4G - Variable speed
  mobile_4g:
    bandwidth: 15 # Mbps
    latency: 80   # ms
    packet_loss: 1.0 # %
  
  # Mobile 3G - Slower speed
  mobile_3g:
    bandwidth: 5  # Mbps
    latency: 150  # ms
    packet_loss: 2.0 # %